<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">         
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Cache Control Headers to prevent browser caching -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    
    <!-- Version Control for Cache Busting -->
    <meta name="app-version" content="2.2.0">
    <meta name="build-timestamp" content="2025-01-21T12:00:00Z">
    
    <!-- Primary Meta Tags -->
    <title>PrecisionConvert.io - Professional Unit Converter Tool</title>
    <meta name="title" content="PrecisionConvert.io - Professional Unit Converter Tool">
    <meta name="description" content="High-precision unit converter for length, weight, temperature, and more. Trusted by engineers with 99.99% accuracy and pro features for $4.99/month.">
    <meta name="keywords" content="unit converter, measurement converter, precision converter, professional calculator, metric conversion, imperial conversion, scientific calculator, engineering tools">
    <meta name="author" content="PrecisionConvert.io">
    <meta name="robots" content="index, follow">
    <link rel="canonical" href="https://precisionconvert.io/">
    
    <!-- Enhanced Security Headers -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' 'unsafe-eval' https: data: blob:; img-src 'self' data: https: blob:; connect-src 'self' https: wss:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; font-src 'self' data: https:; media-src 'self' data: https:;">
    <meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin">
    <meta http-equiv="Permissions-Policy" content="geolocation=(), microphone=(), camera=(), payment=(), usb=()">
    <meta http-equiv="X-Content-Type-Options" content="nosniff">
    <meta http-equiv="X-Frame-Options" content="DENY">
    <meta http-equiv="X-XSS-Protection" content="1; mode=block">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://precisionconvert.io/">
    <meta property="og:title" content="Professional Unit Converter">
    <meta property="og:description" content="Precision calculations for professionals">
    <meta property="og:image" content="https://precisionconvert.io/og-image.png">
    <meta property="og:site_name" content="PrecisionConvert.io">
    <meta property="og:locale" content="en_US">
    
    <!-- Twitter Cards -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:url" content="https://precisionconvert.io/">
    <meta name="twitter:title" content="Professional Unit Converter">
    <meta name="twitter:description" content="Precision calculations for professionals">
    <meta name="twitter:image" content="https://precisionconvert.io/twitter-card.png">
    <meta name="twitter:site" content="@PrecisionConvert">
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üìè</text></svg>">
    
    <!-- Enhanced Performance Optimization -->
    <link rel="preconnect" href="https://www.googletagmanager.com">
    <link rel="dns-prefetch" href="//www.googletagmanager.com">
    <link rel="preconnect" href="https://js.stripe.com">
    <link rel="dns-prefetch" href="//js.stripe.com">
    <script src="https://js.stripe.com/v3/"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
    <meta name="theme-color" content="#2563eb">
    <meta name="color-scheme" content="light dark">
    
    <!-- Resource Hints for Better Performance -->
    <link rel="prefetch" href="https://precisionconvert.io/sitemap.xml">
    <link rel="preload" as="script" href="#inline-js">
    
    <!-- Apple Touch Icon & Mobile Optimizations -->
    <link rel="apple-touch-icon" sizes="180x180" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 180 180'><rect width='180' height='180' fill='%232563eb'/><text x='90' y='120' font-size='80' text-anchor='middle' fill='white'>üìè</text></svg>">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="PrecisionConvert">
    
    <!-- Microsoft Tiles -->
    <meta name="msapplication-TileColor" content="#2563eb">
    <meta name="msapplication-TileImage" content="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 144 144'><rect width='144' height='144' fill='%232563eb'/><text x='72' y='95' font-size='64' text-anchor='middle' fill='white'>üìè</text></svg>">
    
    <!-- Enhanced Schema.org Structured Data -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "WebApplication",
      "name": "PrecisionConvert.io",
      "url": "https://precisionconvert.io",
      "description": "Professional unit converter tool with high precision calculations",
      "applicationCategory": "UtilitiesApplication",
      "operatingSystem": "Any",
      "browserRequirements": "Requires JavaScript. Compatible with all modern browsers.",
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": "4.8",
        "ratingCount": "2847",
        "bestRating": "5",
        "worstRating": "1"
      },
      "offers": {
        "@type": "Offer",
        "price": "4.99",
        "priceCurrency": "USD",
        "validFrom": "2024-01-01",
        "availability": "https://schema.org/InStock",
        "priceValidUntil": "2025-12-31"
      },
      "featureList": [
        "Real-time unit conversion with 99.99% accuracy",
        "15 decimal place precision calculations",
        "1000+ unit types across multiple categories",
        "Professional cooking units and recipe scaling",
        "Scientific units for research and engineering",
        "Historical and specialized measurements",
        "Conversion history and favorites",
        "Dark/Light theme support",
        "Mobile responsive design",
        "Offline conversion capabilities"
      ],
      "creator": {
        "@type": "Organization",
        "name": "PrecisionConvert.io",
        "url": "https://precisionconvert.io",
        "contactPoint": {
          "@type": "ContactPoint",
          "contactType": "customer service",
          "email": "rainking6693@gmail.com",
          "availableLanguage": "English"
        }
      },
      "audience": {
        "@type": "Audience",
        "audienceType": "Engineers, Scientists, Students, Professionals"
      },
      "softwareVersion": "2.2.0",
      "releaseDate": "2024-01-01",
      "screenshot": "https://precisionconvert.io/screenshot.png",
      "downloadUrl": "https://precisionconvert.io",
      "supportingData": "https://precisionconvert.io/sitemap.xml"
    }
    </script>
    
    <!-- Organization Schema -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": "PrecisionConvert.io",
      "url": "https://precisionconvert.io",
      "description": "Professional unit conversion tools for engineers, scientists, and professionals who demand precision.",
      "contactPoint": {
        "@type": "ContactPoint",
        "contactType": "customer service",
        "email": "support@precisionconvert.io"
      }
    }
    </script>
    
    <!-- Enhanced FAQ Schema -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      "mainEntity": [
        {
          "@type": "Question",
          "name": "How accurate are the conversions?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "PrecisionConvert.io provides 99.99% accuracy using advanced algorithms and up to 15 decimal places for professional use."
          }
        },
        {
          "@type": "Question",
          "name": "What makes PrecisionConvert.io different from other converters?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Our tool offers professional-grade precision with 15 decimal places, specialized units for engineers and scientists, and 99.99% accuracy trusted by professionals worldwide. We include advanced features like conversion history, dark mode, and specialized categories not found in basic converters."
          }
        },
        {
          "@type": "Question",
          "name": "Which professions use PrecisionConvert.io?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Engineers, scientists, medical professionals, architects, contractors, chefs, students, researchers, and international business professionals rely on our precision calculations for critical measurements and conversions."
          }
        },
        {
          "@type": "Question",
          "name": "Is the free version sufficient for basic conversions?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Yes, our free version handles all standard unit conversions with professional accuracy. The Pro version ($4.99/month) adds specialized categories like scientific units, professional cooking measurements, and historical units for advanced use cases."
          }
        },
        {
          "@type": "Question",
          "name": "How do I convert units offline?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "PrecisionConvert.io works offline once loaded. All conversion calculations are performed locally in your browser, ensuring your data privacy and allowing conversions without internet connectivity."
          }
        }
      ]
    }
    </script>
    
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-C3B4BYJJHK"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-C3B4BYJJHK', {
        anonymize_ip: true,
        cookie_flags: 'SameSite=Strict;Secure'
      });
    </script>
    
    <style>
        :root {
            /* Light theme colors */
            --primary-color: #2563eb;
            --secondary-color: #1e40af;
            --accent-color: #3b82f6;
            --background-color: #ffffff;
            --surface-color: #f8fafc;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        [data-theme="dark"] {
            --primary-color: #3b82f6;
            --secondary-color: #2563eb;
            --accent-color: #60a5fa;
            --background-color: #0f172a;
            --surface-color: #1e293b;
            --text-primary: #f8fafc;
            --text-secondary: #cbd5e1;
            --border-color: #334155;
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.3), 0 1px 2px 0 rgba(0, 0, 0, 0.2);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2);
        }
        
        [data-theme="high-contrast"] {
            --primary-color: #000000;
            --secondary-color: #000000;
            --accent-color: #000000;
            --background-color: #ffffff;
            --surface-color: #ffffff;
            --text-primary: #000000;
            --text-secondary: #000000;
            --border-color: #000000;
        }

        /* Premium Feature Styling */
        .premium-tooltip {
            position: relative;
        }
        
        .premium-tooltip:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .premium-tooltip::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.85rem;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s;
            z-index: 1000;
            margin-bottom: 0.5rem;
        }
        
        .premium-tooltip:hover::after {
            opacity: 1;
        }
        
        .premium-badge {
            background: linear-gradient(135deg, #fbbf24, #f59e0b);
            color: #1f2937;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.7rem;
            font-weight: 800;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            box-shadow: 0 2px 4px rgba(251, 191, 36, 0.3);
            animation: premium-pulse 3s infinite;
        }
        
        @keyframes premium-pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); box-shadow: 0 4px 8px rgba(251, 191, 36, 0.4); }
        }
        
        .professional-category:not(.active):hover {
            background: linear-gradient(135deg, rgba(251, 191, 36, 0.1), rgba(245, 158, 11, 0.1));
            border-color: #fbbf24;
        }
        
        .premium-feature {
            position: relative;
        }
        
        .premium-feature::before {
            content: 'üíé';
            position: absolute;
            top: -8px;
            right: -8px;
            background: linear-gradient(135deg, #fbbf24, #f59e0b);
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            z-index: 1;
        }

        /* Premium Themes - Only available with premium subscription */
        [data-theme="scientific-blue"] {
            --primary-color: #1e40af;
            --secondary-color: #1e3a8a;
            --accent-color: #3b82f6;
            --background-color: #0a0f1c;
            --surface-color: #1e2738;
            --text-primary: #ffffff;
            --text-secondary: #b8c5d1;
            --border-color: #2d3748;
            --shadow: 0 2px 8px 0 rgba(30, 64, 175, 0.4), 0 1px 3px 0 rgba(30, 64, 175, 0.3);
            --shadow-lg: 0 15px 25px -5px rgba(30, 64, 175, 0.4), 0 8px 10px -3px rgba(30, 64, 175, 0.3);
            --calculator-glow: 0 0 20px rgba(30, 64, 175, 0.5);
        }

        [data-theme="engineering-orange"] {
            --primary-color: #ea580c;
            --secondary-color: #c2410c;
            --accent-color: #fb923c;
            --background-color: #0f0a08;
            --surface-color: #1f1815;
            --text-primary: #ffffff;
            --text-secondary: #d4cfc7;
            --border-color: #3c342b;
            --shadow: 0 2px 8px 0 rgba(234, 88, 12, 0.4), 0 1px 3px 0 rgba(234, 88, 12, 0.3);
            --shadow-lg: 0 15px 25px -5px rgba(234, 88, 12, 0.4), 0 8px 10px -3px rgba(234, 88, 12, 0.3);
            --industrial-stripe: linear-gradient(45deg, transparent 35%, rgba(234, 88, 12, 0.1) 35%, rgba(234, 88, 12, 0.1) 50%, transparent 50%);
        }

        [data-theme="minimalist-green"] {
            --primary-color: #059669;
            --secondary-color: #047857;
            --accent-color: #10b981;
            --background-color: #ffffff;
            --surface-color: #ffffff;
            --text-primary: #0f172a;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
            --shadow: 0 1px 3px 0 rgba(5, 150, 105, 0.08), 0 1px 2px 0 rgba(5, 150, 105, 0.04);
            --shadow-lg: 0 10px 15px -3px rgba(5, 150, 105, 0.08), 0 4px 6px -2px rgba(5, 150, 105, 0.04);
            --clean-spacing: 3rem;
        }

        /* Professional Theme Enhancements */
        [data-theme="scientific-blue"] .converter-card {
            box-shadow: var(--calculator-glow), var(--shadow-lg);
            background: linear-gradient(135deg, var(--surface-color), rgba(30, 64, 175, 0.05));
        }

        [data-theme="scientific-blue"] .input-field,
        [data-theme="scientific-blue"] .select-field {
            background: rgba(30, 64, 175, 0.1);
            border: 1px solid rgba(30, 64, 175, 0.3);
            color: var(--text-primary);
        }

        [data-theme="engineering-orange"] .converter-card {
            background: var(--industrial-stripe), var(--surface-color);
            border: 2px solid var(--primary-color);
        }

        [data-theme="engineering-orange"] .category-section-label {
            position: relative;
            overflow: hidden;
        }

        [data-theme="engineering-orange"] .category-section-label::before {
            content: '';
            position: absolute;
            top: 0;
            left: -50%;
            width: 150%;
            height: 100%;
            background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.1) 50%, transparent 70%);
            animation: industrial-shine 3s infinite;
        }

        @keyframes industrial-shine {
            0% { left: -50%; }
            100% { left: 150%; }
        }

        [data-theme="minimalist-green"] .converter-card {
            padding: var(--clean-spacing);
            margin: var(--clean-spacing) 0;
            border: none;
            box-shadow: none;
            border-left: 4px solid var(--primary-color);
        }

        [data-theme="minimalist-green"] .category-section {
            margin: var(--clean-spacing) 0;
        }

        [data-theme="minimalist-green"] .input-field,
        [data-theme="minimalist-green"] .select-field {
            border: 1px solid var(--border-color);
            border-radius: 0;
            box-shadow: none;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: var(--background-color);
            color: var(--text-primary);
            line-height: 1.6;
            transition: var(--transition);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }
        
        /* Header */
        .header {
            background-color: var(--surface-color);
            border-bottom: 1px solid var(--border-color);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(10px);
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 1rem;
            text-decoration: none;
            transition: var(--transition);
        }
        
        .logo-icon {
            font-size: 2rem;
            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
            transition: var(--transition);
        }
        
        .logo-text {
            display: flex;
            flex-direction: column;
        }
        
        .logo-name {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
            line-height: 1;
        }
        
        .logo-tagline {
            font-size: 0.7rem;
            font-weight: 800;
            color: var(--text-secondary);
            letter-spacing: 2px;
            line-height: 1;
            margin-top: 2px;
            background: linear-gradient(135deg, #ea580c, #c2410c);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .logo:hover .logo-icon {
            transform: scale(1.1) rotate(5deg);
        }
        
        .logo:hover .logo-name {
            color: var(--secondary-color);
        }
        
        .nav-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .theme-selector-container {
            display: flex;
            align-items: center;
            background: var(--surface-color);
            border: 2px solid var(--border-color);
            border-radius: 0.75rem;
            padding: 0.5rem 1rem;
            transition: var(--transition);
        }
        
        .theme-selector-container:hover {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }
        
        .theme-selector-dropdown, .help-btn {
            background: transparent;
            border: none;
            color: var(--text-primary);
            padding: 0.25rem;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: var(--transition);
            font-size: 1rem;
            min-width: 180px;
            font-weight: 500;
        }
        
        .theme-selector-dropdown:hover, .help-btn:hover {
            background-color: var(--surface-color);
            border-color: var(--primary-color);
        }
        
        .help-btn {
            background: var(--surface-color);
            border: 1px solid var(--border-color);
            padding: 0.5rem;
            border-radius: 0.5rem;
            min-width: auto;
        }
        
        .theme-selector select.theme-toggle option.premium-theme:disabled {
            color: #999;
            font-style: italic;
        }

        /* Premium Feature Indicators */
        .premium-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #22c55e;
            color: white;
            font-size: 0.6rem;
            font-weight: bold;
            padding: 0.15rem 0.35rem;
            border-radius: 0.25rem;
            text-transform: uppercase;
            z-index: 10;
        }

        .premium-badge.pro {
            background: #f59e0b;
        }

        .premium-badge.locked {
            background: #ef4444;
        }

        .premium-feature {
            position: relative;
        }

        .premium-feature:not(.unlocked) {
            opacity: 0.7;
        }
        
        .premium-feature.unlocked .export-button {
            background: linear-gradient(135deg, #22c55e, #16a34a);
            border-color: #22c55e;
            animation: pulse-success 2s infinite;
        }
        
        @keyframes pulse-success {
            0% { box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(34, 197, 94, 0); }
            100% { box-shadow: 0 0 0 0 rgba(34, 197, 94, 0); }
        }

        .premium-tooltip {
            position: relative;
            cursor: help;
        }

        .premium-tooltip:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            white-space: nowrap;
            z-index: 1000;
            max-width: 200px;
            white-space: normal;
            text-align: center;
        }

        .premium-tooltip:hover::before {
            content: '';
            position: absolute;
            bottom: 117%;
            left: 50%;
            transform: translateX(-50%);
            border: 4px solid transparent;
            border-top-color: rgba(0, 0, 0, 0.9);
            z-index: 1001;
        }

        /* FAQ Styling */
        .faq-container {
            max-height: 70vh;
            overflow-y: auto;
        }
        
        .faq-item {
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            overflow: hidden;
        }
        
        .faq-question {
            width: 100%;
            background: var(--surface-color);
            border: none;
            padding: 1rem;
            text-align: left;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
            color: var(--text-primary);
        }
        
        .faq-question:hover {
            background: var(--background-color);
        }
        
        .faq-icon {
            font-size: 1.2rem;
            transition: transform 0.2s ease;
        }
        
        .faq-question.active .faq-icon {
            transform: rotate(45deg);
        }
        
        .faq-answer {
            padding: 0 1rem;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease, padding 0.3s ease;
            background: var(--background-color);
        }
        
        .faq-answer.active {
            max-height: 500px;
            padding: 1rem;
        }
        
        .faq-answer p {
            margin-bottom: 0.75rem;
        }
        
        .faq-answer ul, .faq-answer ol {
            margin: 0.75rem 0;
            padding-left: 1.5rem;
        }
        
        .faq-answer li {
            margin-bottom: 0.5rem;
        }
        
        /* Main converter */
        .converter-section {
            padding: 2rem 0;
        }
        
        .converter-card {
            background-color: var(--surface-color);
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: var(--shadow-lg);
            border: 1px solid var(--border-color);
            margin-bottom: 2rem;
        }
        
        .converter-header {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .precision-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: linear-gradient(135deg, #ea580c, #c2410c);
            color: white;
            padding: 0.5rem 1.5rem;
            border-radius: 2rem;
            font-weight: 800;
            font-size: 0.8rem;
            letter-spacing: 1px;
            margin-bottom: 1rem;
            box-shadow: 0 4px 12px rgba(234, 88, 12, 0.3);
        }
        
        .precision-icon {
            font-size: 1.2rem;
            animation: precision-glow 2s infinite;
        }
        
        @keyframes precision-glow {
            0%, 100% { filter: brightness(1); }
            50% { filter: brightness(1.3) drop-shadow(0 0 8px rgba(255, 255, 255, 0.8)); }
        }
        
        .converter-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }
        
        .converter-header p {
            color: var(--text-secondary);
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
        }
        
        .accuracy-indicators {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-top: 1.5rem;
        }
        
        .accuracy-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1rem;
            background: var(--surface-color);
            border: 1px solid var(--border-color);
            border-radius: 0.75rem;
            min-width: 100px;
            box-shadow: var(--shadow);
            transition: var(--transition);
        }
        
        .accuracy-item:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }
        
        .accuracy-number {
            font-size: 1.8rem;
            font-weight: 800;
            color: var(--primary-color);
            line-height: 1;
        }
        
        .accuracy-label {
            font-size: 0.8rem;
            font-weight: 600;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-top: 0.25rem;
        }
        
        .converter-grid {
            display: grid;
            grid-template-columns: 1fr auto 1fr;
            gap: 1rem;
            align-items: end;
            margin-bottom: 2rem;
        }
        
        .input-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .input-group label {
            font-weight: 600;
            color: var(--text-primary);
            font-size: 0.9rem;
        }
        
        .input-field, .select-field {
            padding: 0.75rem;
            border: 2px solid var(--border-color);
            border-radius: 0.5rem;
            font-size: 1rem;
            background-color: var(--background-color);
            color: var(--text-primary);
            transition: var(--transition);
        }
        
        .input-field:focus, .select-field:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        .swap-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 3rem;
            height: 3rem;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
            font-size: 1.2rem;
        }
        
        .swap-btn:hover {
            background-color: var(--secondary-color);
            transform: rotate(180deg);
        }
        
        .result-section {
            background-color: var(--background-color);
            border: 2px solid var(--primary-color);
            border-radius: 0.75rem;
            padding: 1.5rem;
            text-align: center;
            margin-bottom: 1rem;
        }
        
        .result-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
            word-break: break-all;
        }
        
        .result-unit {
            color: var(--text-secondary);
            font-size: 1.1rem;
        }
        
        .result-actions {
            display: flex;
            gap: 0.5rem;
            justify-content: center;
            margin-top: 1rem;
        }
        
        .btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 0.375rem;
            background-color: var(--surface-color);
            color: var(--text-primary);
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.9rem;
        }
        
        .btn:hover {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        
        .btn-primary:hover {
            background-color: var(--secondary-color);
        }
        
        /* Categories */
        .categories {
            display: flex;
            flex-direction: column;
            gap: 2rem;
            margin-bottom: 2rem;
        }
        
        .category-section {
            border-radius: 1rem;
            overflow: hidden;
            border: 1px solid var(--border-color);
            background: var(--surface-color);
        }
        
        .category-section-label {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 1rem;
            font-weight: 700;
            font-size: 0.9rem;
            letter-spacing: 1px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        
        .professional-categories .category-section-label {
            background: linear-gradient(135deg, #ea580c, #c2410c);
        }
        
        .pro-badge {
            background: rgba(255, 255, 255, 0.2);
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 800;
            backdrop-filter: blur(10px);
        }
        
        .basic-categories .category-section-label {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        }
        
        .category-section .categories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 0;
        }
        
        .basic-categories {
            display: grid;
            grid-template-rows: auto 1fr;
        }
        
        .basic-categories .categories-grid,
        .professional-categories .categories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }
        
        .category-section:not(.category-section-label) {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }
        
        .category-btn {
            padding: 1.2rem;
            border: none;
            border-right: 1px solid var(--border-color);
            border-bottom: 1px solid var(--border-color);
            background-color: var(--surface-color);
            color: var(--text-primary);
            cursor: pointer;
            transition: var(--transition);
            text-align: center;
            font-weight: 600;
            font-size: 0.95rem;
            position: relative;
            overflow: hidden;
        }
        
        .category-btn:hover {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
            z-index: 2;
        }
        
        .category-btn.active {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            box-shadow: inset 0 0 0 2px rgba(255, 255, 255, 0.3);
        }
        
        .professional-category {
            position: relative;
        }
        
        .professional-category::before {
            content: '';
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            width: 8px;
            height: 8px;
            background: linear-gradient(135deg, #fbbf24, #f59e0b);
            border-radius: 50%;
            box-shadow: 0 0 4px rgba(251, 191, 36, 0.6);
        }
        
        .professional-category:hover::before {
            animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.2); }
        }
        
        /* Features grid */
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin: 2rem 0;
        }
        
        .feature-card {
            background-color: var(--surface-color);
            border-radius: 0.75rem;
            padding: 1.5rem;
            border: 1px solid var(--border-color);
            transition: var(--transition);
        }
        
        .feature-card:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-2px);
        }
        
        .feature-icon {
            font-size: 2rem;
            margin-bottom: 1rem;
            display: block;
        }
        
        .feature-card h3 {
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }
        
        /* History panel */
        .history-panel {
            background-color: var(--surface-color);
            border-radius: 0.75rem;
            padding: 1.5rem;
            border: 1px solid var(--border-color);
            margin-bottom: 2rem;
        }
        
        .history-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .history-list {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .history-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            border-radius: 0.375rem;
            margin-bottom: 0.5rem;
            background-color: var(--background-color);
            border: 1px solid var(--border-color);
            transition: var(--transition);
        }
        
        .history-item:hover {
            border-color: var(--primary-color);
        }
        
        /* Precision controls */
        .precision-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }
        
        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }
        
        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: var(--surface-color);
            border-radius: 1rem;
            padding: 2rem;
            max-width: 90%;
            max-height: 90%;
            overflow-y: auto;
            border: 1px solid var(--border-color);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-secondary);
        }
        
        /* Upgrade banner */
        .upgrade-banner {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 1rem;
            border-radius: 0.75rem;
            text-align: center;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }
        
        .upgrade-banner::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            animation: shimmer 3s infinite;
        }
        
        @keyframes shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        /* FAQ */
        .faq-section {
            margin: 3rem 0;
        }
        
        .faq-item {
            background-color: var(--surface-color);
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            border: 1px solid var(--border-color);
        }
        
        .faq-question {
            width: 100%;
            text-align: left;
            padding: 1rem;
            background: none;
            border: none;
            cursor: pointer;
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .faq-answer {
            padding: 0 1rem 1rem;
            color: var(--text-secondary);
            display: none;
        }
        
        .faq-answer.active {
            display: block;
        }
        
        /* Footer */
        .footer {
            background-color: var(--surface-color);
            border-top: 1px solid var(--border-color);
            padding: 3rem 0 2rem;
            margin-top: 4rem;
        }
        
        .footer-content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }
        
        .footer-section h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
        }
        
        .footer-links {
            list-style: none;
        }
        
        .footer-links li {
            margin-bottom: 0.5rem;
        }
        
        .footer-links a {
            color: var(--text-secondary);
            text-decoration: none;
            transition: var(--transition);
        }
        
        .footer-links a:hover {
            color: var(--primary-color);
        }
        
        .footer-bottom {
            text-align: center;
            padding-top: 2rem;
            border-top: 1px solid var(--border-color);
            color: var(--text-secondary);
        }
        
        /* Contact form */
        .contact-form {
            display: grid;
            gap: 1rem;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .textarea-field {
            min-height: 100px;
            resize: vertical;
            padding: 0.75rem;
            border: 2px solid var(--border-color);
            border-radius: 0.5rem;
            font-family: inherit;
            background-color: var(--background-color);
            color: var(--text-primary);
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .converter-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .swap-btn {
                justify-self: center;
                transform: rotate(90deg);
            }
            
            .result-actions {
                flex-direction: column;
            }
            
            .category-section:not(.category-section-label) {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .precision-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .converter-header h1 {
                font-size: 2rem;
            }
            
            .accuracy-indicators {
                flex-direction: column;
                gap: 1rem;
            }
            
            .accuracy-item {
                min-width: auto;
            }
        }
        
        @media (max-width: 480px) {
            .category-section:not(.category-section-label) {
                grid-template-columns: 1fr;
            }
            
            .header-content {
                flex-direction: column;
                text-align: center;
            }
        }
        
        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        .animate-in {
            animation: fadeIn 0.5s ease-out;
        }
        
        .pulse {
            animation: pulse 2s infinite;
        }
        
        /* Loading states */
        .loading {
            position: relative;
            overflow: hidden;
        }
        
        .loading::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            animation: loading 1.5s infinite;
        }
        
        @keyframes loading {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        /* Accessibility */
        @media (prefers-reduced-motion: reduce) {
            * {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }
        
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        
        /* Keyboard navigation */
        .keyboard-nav *:focus {
            outline: 3px solid var(--primary-color);
            outline-offset: 2px;
        }
    </style>
    
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="container">
            <div class="header-content">
                <a href="#" class="logo">
                    <span class="logo-icon">üìè</span>
                    <span class="logo-text">
                        <span class="logo-name">PrecisionConvert.io</span>
                        <span class="logo-tagline">PROFESSIONAL GRADE</span>
                    </span>
                </a>
                <div class="nav-controls">
                    <button class="btn btn-primary" id="upgradeBtn" onclick="showPaymentModal()" style="margin-right: 1rem;">
                        üëë Upgrade to PROFESSIONAL
                    </button>
                    <div class="theme-selector-container premium-feature">
                        <label for="themeSelect" style="font-weight: bold; margin-right: 0.5rem; color: var(--text-primary);">üé® Theme:</label>
                        <select class="theme-selector-dropdown premium-tooltip" id="themeSelect" aria-label="Select theme" data-tooltip="Premium themes available with subscription">
                            <optgroup label="üÜì FREE THEMES">
                                <option value="light">üåû Light</option>
                                <option value="dark">üåô Dark</option>
                                <option value="high-contrast">‚ö´ High Contrast</option>
                            </optgroup>
                            <optgroup label="üíé PROFESSIONAL THEMES">
                                <option value="scientific-blue" class="premium-theme" disabled>üß™ Scientific Blue</option>
                                <option value="engineering-orange" class="premium-theme" disabled>üîß Engineering Orange</option>
                                <option value="minimalist-green" class="premium-theme" disabled>üåø Minimalist Green</option>
                            </optgroup>
                        </select>
                        <span class="premium-badge pro" style="margin-left: 0.5rem;">3 PRO THEMES</span>
                    </div>
                    <button class="help-btn" id="helpBtn" aria-label="Show keyboard shortcuts">
                        <span>?</span>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container">
        <!-- Upgrade Banner -->
        <div class="upgrade-banner">
            <h3>üöÄ Upgrade to PROFESSIONAL for Specialized Units</h3>
            <p>Get professional cooking, scientific, and historical unit categories - $4.99/month</p>
            <button class="btn btn-primary" style="margin-top: 0.5rem;" onclick="showPaymentModal()">Learn More</button>
        </div>

        <!-- Converter Section -->
        <section class="converter-section">
            <div class="converter-card">
                <div class="converter-header">
                    <div class="precision-badge">
                        <span class="precision-icon">‚ö°</span>
                        <span class="precision-text">PRECISION GRADE</span>
                    </div>
                    <h1>Professional Unit Converter</h1>
                    <p>Precision calculations trusted by engineers and scientists worldwide</p>
                    <div class="accuracy-indicators">
                        <div class="accuracy-item">
                            <span class="accuracy-number">99.99%</span>
                            <span class="accuracy-label">Accuracy</span>
                        </div>
                        <div class="accuracy-item">
                            <span class="accuracy-number">15</span>
                            <span class="accuracy-label">Decimal Places</span>
                        </div>
                        <div class="accuracy-item">
                            <span class="accuracy-number">1000+</span>
                            <span class="accuracy-label">Unit Types</span>
                        </div>
                    </div>
                </div>

                <!-- Categories -->
                <div class="categories" id="categories">
                    <div class="category-section basic-categories">
                        <div class="category-section-label">BASIC CONVERSIONS</div>
                        <button class="category-btn active" data-category="length" aria-label="Select length conversion category">üìè Length</button>
                        <button class="category-btn" data-category="weight" aria-label="Select weight conversion category">‚öñÔ∏è Weight</button>
                        <button class="category-btn" data-category="temperature" aria-label="Select temperature conversion category">üå°Ô∏è Temperature</button>
                        <button class="category-btn" data-category="volume" aria-label="Select volume conversion category">ü´ó Volume</button>
                        <button class="category-btn" data-category="area" aria-label="Select area conversion category">üìê Area</button>
                        <button class="category-btn" data-category="time" aria-label="Select time conversion category">‚è∞ Time</button>
                    </div>
                    <div class="category-section professional-categories">
                        <div class="category-section-label">
                            <span>PROFESSIONAL GRADE</span>
                            <span class="pro-badge">PRO</span>
                        </div>
                        <button class="category-btn professional-category premium-tooltip" data-category="cooking" data-tooltip="üç≥ PROFESSIONAL Cooking Units - Specialized butter measurements, flour types, recipe scaling, international baking, oven temperatures ($4.99/month)">
                            üë®‚Äçüç≥ Cooking <span class="premium-badge">PRO</span>
                        </button>
                        <button class="category-btn professional-category premium-tooltip" data-category="scientific" data-tooltip="üî¨ PROFESSIONAL Scientific Units - Laboratory molarity, ppm/ppb, micrograms, nanograms, physics units, pressure, light, sound ($4.99/month)">
                            üß™ Scientific <span class="premium-badge">PRO</span>
                        </button>
                        <button class="category-btn professional-category premium-tooltip" data-category="historical" data-tooltip="üìú PROFESSIONAL Historical Units - Ancient cubits, talents, medieval rods, chains, regional Asian units ($4.99/month)">
                            üìú Historical <span class="premium-badge">PRO</span>
                        </button>
                        <button class="category-btn professional-category premium-tooltip" data-category="programming" data-tooltip="üíª PROFESSIONAL Computing Units - Digital storage and data units ($4.99/month)">
                            üíª Programming <span class="premium-badge">PRO</span>
                        </button>
                    </div>
                </div>

                <!-- Precision Controls -->
                <div class="precision-controls">
                    <label for="precision">Decimal Places:</label>
                    <select id="precision" class="select-field premium-tooltip" data-tooltip="Higher precision is available with Premium subscription">
                        <option value="2">2 places ‚úÖ FREE</option>
                        <option value="4" class="premium-option">4 places üíé PREMIUM</option>
                        <option value="6" class="premium-option">6 places üíé PREMIUM</option>
                        <option value="8" class="premium-option">8 places üíé PREMIUM</option>
                        <option value="12" class="premium-option">12 places üíé PREMIUM</option>
                        <option value="15" class="premium-option">15 places üíé PREMIUM</option>
                    </select>
                    <button class="btn btn-primary" id="unlockPrecisionBtn" onclick="showPaymentModal()" style="margin-left: 0.5rem;">üîì Unlock Pro Precision</button>
                    
                    <label title="Display all results in scientific notation (e.g., 1.23e+6 instead of 1230000)" style="position: relative;">
                        <input type="checkbox" id="scientificNotation"> üî¨ Scientific Notation (e.g., 1.23e+6)
                        <span class="premium-badge">FREE</span>
                    </label>
                    
                    <button class="btn" id="showFormula">Show Formula</button>
                </div>

                <!-- Converter Grid -->
                <!-- Premium Features Banner -->
                <div id="premiumFeaturesBar" style="display: none; background: linear-gradient(135deg, #22c55e, #16a34a); color: white; padding: 0.75rem 1rem; border-radius: 0.5rem; margin-bottom: 1rem; text-align: center;">
                    <strong>‚úÖ PREMIUM ACTIVE</strong> - Custom Units Creator, Advanced Export Options & Premium Themes Unlocked!
                </div>
                
                <div class="converter-grid">
                    <div class="input-group">
                        <label for="fromUnit">From</label>
                        <select id="fromUnit" class="select-field">
                            <!-- Options populated by JavaScript -->
                        </select>
                        <input type="number" id="inputValue" class="input-field" placeholder="Enter value" step="any" aria-label="Enter value to convert" role="spinbutton" aria-describedby="conversion-help">
                    </div>
                    
                    <button class="swap-btn" id="swapBtn" aria-label="Swap units">
                        ‚áÑ
                    </button>
                    
                    <div class="input-group">
                        <label for="toUnit">To</label>
                        <select id="toUnit" class="select-field">
                            <!-- Options populated by JavaScript -->
                        </select>
                    </div>
                </div>

                <!-- Result Section -->
                <div class="result-section">
                    <div class="result-value" id="resultValue">0</div>
                    <div class="result-unit" id="resultUnit">Select units to convert</div>
                    <div class="result-actions">
                        <button class="btn premium-tooltip" id="copyResult" data-tooltip="Copy the result to your clipboard">üìã Copy</button>
                        <button class="btn premium-tooltip" id="favoriteBtn" data-tooltip="Save this conversion pair to your favorites">‚≠ê Favorite</button>
                        <button class="btn export-button premium-feature premium-tooltip" id="exportBtn" data-tooltip="Export your conversion data in CSV, PDF, or plain text formats">
                            üì§ Export Data
                            <span class="premium-badge pro">PRO</span>
                        </button>
                    </div>
                </div>

                <!-- Formula Display -->
                <div id="formulaDisplay" style="display: none; margin-top: 1rem; padding: 1rem; background-color: var(--background-color); border-radius: 0.5rem; border: 1px solid var(--border-color);">
                    <strong>Formula:</strong> <span id="formulaText"></span>
                </div>
            </div>
        </section>

        <!-- Features Grid -->
        <div class="features-grid">
            <!-- History Panel -->
            <div class="history-panel">
                <div class="history-header">
                    <h3>Conversion History</h3>
                    <button class="btn" id="clearHistory">Clear All</button>
                </div>
                <div class="history-list" id="historyList">
                    <p style="text-align: center; color: var(--text-secondary);">No conversions yet</p>
                </div>
            </div>

            <!-- Favorites -->
            <div class="feature-card">
                <span class="feature-icon">‚≠ê</span>
                <h3>Favorite Conversions</h3>
                <p>Save your most-used conversions for quick access</p>
                <div id="favoritesList">
                    <p style="text-align: center; color: var(--text-secondary); margin-top: 1rem;">No favorites yet</p>
                </div>
            </div>

            <!-- Batch Converter (Dynamic: Premium Feature) -->
            <div id="batchConverterCard" class="feature-card">
                <!-- This will be populated dynamically based on premium status -->
            </div>
        </div>

        <!-- FAQ Section -->
        <section class="faq-section" id="faq">
            <h2 style="text-align: center; margin-bottom: 2rem; color: var(--primary-color);">Frequently Asked Questions</h2>
            
            <div class="faq-item">
                <button class="faq-question">
                    How accurate are the conversions?
                    <span>+</span>
                </button>
                <div class="faq-answer">
                    PrecisionConvert.io uses high-precision algorithms to ensure accuracy up to 8 decimal places. Our calculations are based on internationally accepted standards and are suitable for professional and scientific applications.
                </div>
            </div>

            <div class="faq-item">
                <button class="faq-question">
                    Which units are supported?
                    <span>+</span>
                </button>
                <div class="faq-answer">
                    We support comprehensive unit conversions for Length, Weight, Temperature, Volume, Area, and Time. This includes metric, imperial, and specialized professional units used in various industries. Our PROFESSIONAL package ($4.99/month) includes specialized cooking units (butter sticks, flour types, recipe scaling), scientific laboratory units (molarity, ppm/ppb, physics measurements), and historical units (ancient cubits, talents, medieval measurements).
                </div>
            </div>

            <div class="faq-item">
                <button class="faq-question">
                    Is my data saved or shared?
                    <span>+</span>
                </button>
                <div class="faq-answer">
                    All conversions are performed locally in your browser. Your data is only saved locally for features like history and favorites. We respect your privacy and don't share any personal information.
                </div>
            </div>

            <div class="faq-item">
                <button class="faq-question">
                    What are the Pro features?
                    <span>+</span>
                </button>
                <div class="faq-answer">
                    Pro features include batch conversion, custom unit creation, advanced export options, priority support, and ad-free experience. Perfect for professionals who need advanced functionality.
                </div>
            </div>
        </section>

        <!-- About Section -->
        <section style="margin: 3rem 0; text-align: center;">
            <h2 style="color: var(--primary-color); margin-bottom: 1rem;">About PrecisionConvert.io</h2>
            <p style="max-width: 800px; margin: 0 auto; color: var(--text-secondary); line-height: 1.8;">
                Built for engineers, scientists, and professionals who demand precision in their calculations. 
                Our advanced algorithms ensure accuracy while maintaining speed and simplicity. 
                Trusted by professionals worldwide for critical measurements and conversions.
            </p>
        </section>

        <!-- SEO Content Sections for High-Volume Keywords -->
        
        <!-- Miles to Kilometers Conversion Section -->
        <section class="seo-content-section" style="margin-top: 3rem; padding: 2rem 0; background: var(--background-color);">
            <div class="container" style="max-width: 1200px;">
                <h2 style="color: var(--primary-color); margin-bottom: 1.5rem; text-align: center;">Miles to Kilometers Converter</h2>
                <p style="text-align: center; color: var(--text-secondary); margin-bottom: 2rem; max-width: 800px; margin-left: auto; margin-right: auto;">
                    Convert miles to kilometers with precision. Essential for international travel, fitness tracking, and scientific calculations.
                </p>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">
                    <div style="background: var(--surface-color); padding: 1.5rem; border-radius: 0.75rem;">
                        <h3 style="color: var(--primary-color); margin-bottom: 1rem;">Quick Conversion Formula</h3>
                        <p style="font-family: monospace; background: var(--background-color); padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem;">
                            Kilometers = Miles √ó 1.609344
                        </p>
                        <p style="color: var(--text-secondary);">
                            The exact conversion factor is 1.609344 kilometers per mile, defined by international agreement.
                        </p>
                    </div>

                    <div style="background: var(--surface-color); padding: 1.5rem; border-radius: 0.75rem;">
                        <h3 style="color: var(--primary-color); margin-bottom: 1rem;">Common Mile to KM Conversions</h3>
                        <table style="width: 100%; border-collapse: collapse;">
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <th style="text-align: left; padding: 0.5rem; color: var(--primary-color);">Miles</th>
                                <th style="text-align: right; padding: 0.5rem; color: var(--primary-color);">Kilometers</th>
                            </tr>
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <td style="padding: 0.5rem;">1 mile</td>
                                <td style="text-align: right; padding: 0.5rem;">1.609 km</td>
                            </tr>
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <td style="padding: 0.5rem;">5 miles</td>
                                <td style="text-align: right; padding: 0.5rem;">8.047 km</td>
                            </tr>
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <td style="padding: 0.5rem;">10 miles</td>
                                <td style="text-align: right; padding: 0.5rem;">16.093 km</td>
                            </tr>
                            <tr>
                                <td style="padding: 0.5rem;">26.2 miles</td>
                                <td style="text-align: right; padding: 0.5rem;">42.165 km</td>
                            </tr>
                        </table>
                    </div>
                </div>

                <h3 style="color: var(--primary-color); margin-bottom: 1rem;">How Many Kilometers in a Mile?</h3>
                <div style="background: var(--surface-color); padding: 1.5rem; border-radius: 0.75rem; margin-bottom: 2rem;">
                    <p style="margin-bottom: 1rem;">
                        <strong>1 mile equals exactly 1.609344 kilometers.</strong> This conversion factor is based on the international definition of the mile as 5,280 feet and the meter as the fundamental unit of length.
                    </p>
                    <p style="margin-bottom: 1rem;">
                        The mile originated from the Roman "milia passuum" (thousand paces), while the kilometer is part of the metric system adopted globally for scientific and most practical applications.
                    </p>
                    <p>
                        For quick mental math: 1 mile ‚âà 1.6 km, 5 miles ‚âà 8 km, 10 miles ‚âà 16 km.
                    </p>
                </div>

                <h3 style="color: var(--primary-color); margin-bottom: 1rem;">KM to Miles Conversion</h3>
                <div style="background: var(--surface-color); padding: 1.5rem; border-radius: 0.75rem;">
                    <p style="margin-bottom: 1rem;">
                        To convert kilometers to miles, divide by 1.609344 or multiply by 0.621371.
                    </p>
                    <p style="font-family: monospace; background: var(--background-color); padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem;">
                        Miles = Kilometers √∑ 1.609344<br>
                        Miles = Kilometers √ó 0.621371
                    </p>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                        <div>
                            <strong>Common KM to Miles:</strong>
                            <ul style="margin-top: 0.5rem;">
                                <li>1 km = 0.621 miles</li>
                                <li>5 km = 3.107 miles</li>
                                <li>10 km = 6.214 miles</li>
                                <li>42.195 km = 26.219 miles</li>
                            </ul>
                        </div>
                        <div>
                            <strong>Applications:</strong>
                            <ul style="margin-top: 0.5rem;">
                                <li>Running distances</li>
                                <li>Road trip planning</li>
                                <li>International shipping</li>
                                <li>Scientific research</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Pounds to Ounces Conversion Section -->
        <section class="seo-content-section" style="margin-top: 2rem; padding: 2rem 0; background: var(--surface-color);">
            <div class="container" style="max-width: 1200px;">
                <h2 style="color: var(--primary-color); margin-bottom: 1.5rem; text-align: center;">Pounds to Ounces Converter</h2>
                <p style="text-align: center; color: var(--text-secondary); margin-bottom: 2rem; max-width: 800px; margin-left: auto; margin-right: auto;">
                    Convert pounds to ounces for cooking, shipping, and weight measurements. Essential for recipes, postal services, and nutrition tracking.
                </p>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">
                    <div style="background: var(--background-color); padding: 1.5rem; border-radius: 0.75rem;">
                        <h3 style="color: var(--primary-color); margin-bottom: 1rem;">How Many Ounces in a Pound?</h3>
                        <p style="font-size: 1.2rem; font-weight: bold; color: var(--primary-color); margin-bottom: 1rem;">
                            1 pound = 16 ounces
                        </p>
                        <p style="font-family: monospace; background: var(--surface-color); padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem;">
                            Ounces = Pounds √ó 16
                        </p>
                        <p style="color: var(--text-secondary);">
                            This is an exact conversion in the US customary and Imperial systems of measurement.
                        </p>
                    </div>

                    <div style="background: var(--background-color); padding: 1.5rem; border-radius: 0.75rem;">
                        <h3 style="color: var(--primary-color); margin-bottom: 1rem;">Pounds to Ounces Chart</h3>
                        <table style="width: 100%; border-collapse: collapse;">
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <th style="text-align: left; padding: 0.5rem; color: var(--primary-color);">Pounds</th>
                                <th style="text-align: right; padding: 0.5rem; color: var(--primary-color);">Ounces</th>
                            </tr>
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <td style="padding: 0.5rem;">0.5 lbs</td>
                                <td style="text-align: right; padding: 0.5rem;">8 oz</td>
                            </tr>
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <td style="padding: 0.5rem;">1 lb</td>
                                <td style="text-align: right; padding: 0.5rem;">16 oz</td>
                            </tr>
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <td style="padding: 0.5rem;">2 lbs</td>
                                <td style="text-align: right; padding: 0.5rem;">32 oz</td>
                            </tr>
                            <tr>
                                <td style="padding: 0.5rem;">5 lbs</td>
                                <td style="text-align: right; padding: 0.5rem;">80 oz</td>
                            </tr>
                        </table>
                    </div>
                </div>

                <h3 style="color: var(--primary-color); margin-bottom: 1rem;">Ounces to Pounds Conversion</h3>
                <div style="background: var(--background-color); padding: 1.5rem; border-radius: 0.75rem; margin-bottom: 2rem;">
                    <p style="margin-bottom: 1rem;">
                        To convert ounces to pounds, divide by 16. This is particularly useful for cooking measurements and package weights.
                    </p>
                    <p style="font-family: monospace; background: var(--surface-color); padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem;">
                        Pounds = Ounces √∑ 16
                    </p>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                        <div>
                            <strong>Common Oz to Lbs:</strong>
                            <ul style="margin-top: 0.5rem;">
                                <li>8 oz = 0.5 lbs</li>
                                <li>12 oz = 0.75 lbs</li>
                                <li>16 oz = 1 lb</li>
                                <li>24 oz = 1.5 lbs</li>
                                <li>32 oz = 2 lbs</li>
                            </ul>
                        </div>
                        <div>
                            <strong>Practical Uses:</strong>
                            <ul style="margin-top: 0.5rem;">
                                <li>Recipe scaling</li>
                                <li>Baby weight tracking</li>
                                <li>Postal shipping</li>
                                <li>Food portioning</li>
                                <li>Jewelry weighing</li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div style="background: #f0f9ff; border-left: 4px solid var(--primary-color); padding: 1.5rem; border-radius: 0.5rem;">
                    <h4 style="color: var(--primary-color); margin-bottom: 0.5rem;">üí° Pro Tip for Cooking</h4>
                    <p style="margin-bottom: 0;">
                        When scaling recipes, remember that 1 pound of butter equals 16 ounces or 4 sticks. For flour, 1 pound equals about 3.5 cups of all-purpose flour.
                    </p>
                </div>
            </div>
        </section>

        <!-- Inches to Centimeters Conversion Section -->
        <section class="seo-content-section" style="margin-top: 2rem; padding: 2rem 0; background: var(--background-color);">
            <div class="container" style="max-width: 1200px;">
                <h2 style="color: var(--primary-color); margin-bottom: 1.5rem; text-align: center;">Inches to Centimeters Converter</h2>
                <p style="text-align: center; color: var(--text-secondary); margin-bottom: 2rem; max-width: 800px; margin-left: auto; margin-right: auto;">
                    Convert inches to centimeters for international measurements, technical drawings, and scientific applications.
                </p>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">
                    <div style="background: var(--surface-color); padding: 1.5rem; border-radius: 0.75rem;">
                        <h3 style="color: var(--primary-color); margin-bottom: 1rem;">How Many Centimeters in an Inch?</h3>
                        <p style="font-size: 1.2rem; font-weight: bold; color: var(--primary-color); margin-bottom: 1rem;">
                            1 inch = 2.54 centimeters (exactly)
                        </p>
                        <p style="font-family: monospace; background: var(--background-color); padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem;">
                            Centimeters = Inches √ó 2.54
                        </p>
                        <p style="color: var(--text-secondary);">
                            This conversion is exact by international definition, established in 1959.
                        </p>
                    </div>

                    <div style="background: var(--surface-color); padding: 1.5rem; border-radius: 0.75rem;">
                        <h3 style="color: var(--primary-color); margin-bottom: 1rem;">Inch to CM Reference Table</h3>
                        <table style="width: 100%; border-collapse: collapse;">
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <th style="text-align: left; padding: 0.5rem; color: var(--primary-color);">Inches</th>
                                <th style="text-align: right; padding: 0.5rem; color: var(--primary-color);">Centimeters</th>
                            </tr>
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <td style="padding: 0.5rem;">1 inch</td>
                                <td style="text-align: right; padding: 0.5rem;">2.54 cm</td>
                            </tr>
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <td style="padding: 0.5rem;">6 inches</td>
                                <td style="text-align: right; padding: 0.5rem;">15.24 cm</td>
                            </tr>
                            <tr style="border-bottom: 1px solid var(--border-color);">
                                <td style="padding: 0.5rem;">12 inches</td>
                                <td style="text-align: right; padding: 0.5rem;">30.48 cm</td>
                            </tr>
                            <tr>
                                <td style="padding: 0.5rem;">24 inches</td>
                                <td style="text-align: right; padding: 0.5rem;">60.96 cm</td>
                            </tr>
                        </table>
                    </div>
                </div>

                <h3 style="color: var(--primary-color); margin-bottom: 1rem;">Centimeters to Inches Conversion</h3>
                <div style="background: var(--surface-color); padding: 1.5rem; border-radius: 0.75rem; margin-bottom: 2rem;">
                    <p style="margin-bottom: 1rem;">
                        To convert centimeters to inches, divide by 2.54 or multiply by 0.393701.
                    </p>
                    <p style="font-family: monospace; background: var(--background-color); padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem;">
                        Inches = Centimeters √∑ 2.54<br>
                        Inches = Centimeters √ó 0.393701
                    </p>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                        <div>
                            <strong>Common CM to Inches:</strong>
                            <ul style="margin-top: 0.5rem;">
                                <li>1 cm = 0.394 inches</li>
                                <li>5 cm = 1.968 inches</li>
                                <li>10 cm = 3.937 inches</li>
                                <li>30 cm = 11.811 inches</li>
                            </ul>
                        </div>
                        <div>
                            <strong>Common Applications:</strong>
                            <ul style="margin-top: 0.5rem;">
                                <li>Screen sizes</li>
                                <li>Height measurements</li>
                                <li>Engineering drawings</li>
                                <li>Fabric measurements</li>
                                <li>Medical measurements</li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div style="background: var(--surface-color); padding: 1.5rem; border-radius: 0.75rem;">
                    <h4 style="color: var(--primary-color); margin-bottom: 1rem;">Common Height Conversions</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">
                        <div>
                            <strong>5'0" = 152.4 cm</strong><br>
                            <span style="color: var(--text-secondary);">60 inches</span>
                        </div>
                        <div>
                            <strong>5'6" = 167.6 cm</strong><br>
                            <span style="color: var(--text-secondary);">66 inches</span>
                        </div>
                        <div>
                            <strong>6'0" = 182.9 cm</strong><br>
                            <span style="color: var(--text-secondary);">72 inches</span>
                        </div>
                        <div>
                            <strong>6'6" = 198.1 cm</strong><br>
                            <span style="color: var(--text-secondary);">78 inches</span>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- FAQ Section for Conversions -->
        <section class="seo-content-section" style="margin-top: 2rem; padding: 2rem 0; background: var(--surface-color);">
            <div class="container" style="max-width: 1000px;">
                <h2 style="color: var(--primary-color); margin-bottom: 2rem; text-align: center;">Frequently Asked Questions</h2>
                
                <div class="faq-grid" style="display: grid; gap: 1.5rem;">
                    <div style="background: var(--background-color); padding: 1.5rem; border-radius: 0.75rem; border-left: 4px solid var(--primary-color);">
                        <h3 style="color: var(--primary-color); margin-bottom: 0.5rem;">How accurate are these conversion calculations?</h3>
                        <p>Our conversions use official international standards with precision up to 15 decimal places. The conversion factors are based on exact definitions: 1 mile = 1.609344 km exactly, 1 pound = 16 ounces exactly, and 1 inch = 2.54 cm exactly.</p>
                    </div>

                    <div style="background: var(--background-color); padding: 1.5rem; border-radius: 0.75rem; border-left: 4px solid var(--primary-color);">
                        <h3 style="color: var(--primary-color); margin-bottom: 0.5rem;">What's the difference between miles and kilometers?</h3>
                        <p>Miles are part of the Imperial system primarily used in the United States, while kilometers are part of the metric system used worldwide. 1 mile equals 1.609344 kilometers. The kilometer is more widely used globally for scientific and everyday measurements.</p>
                    </div>

                    <div style="background: var(--background-color); padding: 1.5rem; border-radius: 0.75rem; border-left: 4px solid var(--primary-color);">
                        <h3 style="color: var(--primary-color); margin-bottom: 0.5rem;">Why are there 16 ounces in a pound?</h3>
                        <p>The pound-ounce relationship comes from the ancient Roman system. The word "ounce" derives from the Latin "uncia" meaning one-twelfth. Over time, the system evolved to have 16 ounces per pound in the avoirdupois system used for most weight measurements today.</p>
                    </div>

                    <div style="background: var(--background-color); padding: 1.5rem; border-radius: 0.75rem; border-left: 4px solid var(--primary-color);">
                        <h3 style="color: var(--primary-color); margin-bottom: 0.5rem;">How do I remember the inch to centimeter conversion?</h3>
                        <p>Remember that 1 inch = 2.54 cm exactly. A useful memory trick: "2.54" sounds like "two and a half plus a little bit." For quick estimates, 1 inch ‚âà 2.5 cm works for most practical purposes.</p>
                    </div>

                    <div style="background: var(--background-color); padding: 1.5rem; border-radius: 0.75rem; border-left: 4px solid var(--primary-color);">
                        <h3 style="color: var(--primary-color); margin-bottom: 0.5rem;">What's the most common conversion mistake?</h3>
                        <p>The most common mistakes are: confusing fluid ounces with weight ounces, using approximate conversion factors instead of exact ones, and mixing up the multiplication/division direction when converting between units. Always double-check your calculation direction.</p>
                    </div>

                    <div style="background: var(--background-color); padding: 1.5rem; border-radius: 0.75rem; border-left: 4px solid var(--primary-color);">
                        <h3 style="color: var(--primary-color); margin-bottom: 0.5rem;">Which professions use these conversions most?</h3>
                        <p>Engineers, scientists, medical professionals, pilots, international traders, chefs, fitness trainers, and construction workers frequently need precise unit conversions. Our tool is designed to meet professional accuracy standards required in these fields.</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Final CTA Section -->
        <section class="seo-content-section" style="margin-top: 2rem; padding: 3rem 0; background: linear-gradient(135deg, var(--primary-color), #1e40af); color: white; text-align: center;">
            <div class="container" style="max-width: 800px;">
                <h2 style="color: white; margin-bottom: 1rem;">Get Professional-Grade Precision</h2>
                <p style="font-size: 1.1rem; margin-bottom: 2rem; opacity: 0.9;">
                    Join thousands of engineers, scientists, and professionals who trust PrecisionConvert.io for critical measurements. Upgrade to Professional for specialized units and advanced features.
                </p>
                <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
                    <button class="btn" style="background: white; color: var(--primary-color); border: none; padding: 1rem 2rem;" onclick="scrollToConverter()">
                        üìè Try Converter
                    </button>
                    <button class="btn" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid white; padding: 1rem 2rem;" onclick="showPaymentModal()">
                        üöÄ Upgrade to Pro
                    </button>
                </div>
                <p style="font-size: 0.9rem; margin-top: 1.5rem; opacity: 0.8;">
                    ‚úÖ 99.99% Accuracy ‚Ä¢ ‚úÖ 15 Decimal Precision ‚Ä¢ ‚úÖ 1000+ Unit Types ‚Ä¢ ‚úÖ Professional Support
                </p>
            </div>
        </section>
        </section>
    </main>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>PrecisionConvert.io</h3>
                    <p>Professional unit conversions with precision you can trust.</p>
                </div>
                
                <div class="footer-section">
                    <h3>Quick Links</h3>
                    <ul class="footer-links">
                        <li><a href="javascript:void(0)" onclick="scrollToConverter()">Converter</a></li>
                        <li><a href="javascript:void(0)" onclick="showFAQModal()">FAQ</a></li>
                        <li><a href="javascript:void(0)" onclick="showAboutModal()">About</a></li>
                        <li><a href="javascript:void(0)" onclick="showContactModal()">Contact</a></li>
                    </ul>
                </div>
                
                <div class="footer-section">
                    <h3>Legal</h3>
                    <ul class="footer-links">
                        <li><a href="javascript:void(0)" onclick="showPrivacyModal()">Privacy Policy</a></li>
                        <li><a href="javascript:void(0)" onclick="showTermsModal()">Terms of Service</a></li>
                        <li><a href="javascript:void(0)" onclick="showCookieModal()">Cookie Policy</a></li>
                    </ul>
                </div>
                
                <div class="footer-section">
                    <h3>Contact Us</h3>
                    <p style="margin-bottom: 1rem; color: var(--text-secondary); font-size: 0.9rem;">
                        üìß <strong>rainking6693@gmail.com</strong><br>
                        Professional support for engineers & scientists
                    </p>
                    <form class="contact-form" name="footer-contact" method="POST" data-netlify="true" action="/index.html?contact=success">
                        <input type="hidden" name="form-name" value="footer-contact">
                        <input type="hidden" name="to" value="rainking6693@gmail.com">
                        <input type="hidden" name="source" value="footer-quick-contact">
                        <div class="form-group">
                            <input type="email" name="email" placeholder="Your email" class="input-field" required>
                        </div>
                        <div class="form-group">
                            <textarea name="message" placeholder="Quick message or question..." class="textarea-field" required rows="3"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Send Message</button>
                    </form>
                </div>
            </div>
            
            <div class="footer-bottom">
                <p>&copy; 2024 PrecisionConvert.io. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <!-- Modals -->
    <!-- Keyboard Shortcuts Modal -->
    <div id="keyboardModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Keyboard Shortcuts</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                <div><kbd>Tab</kbd> Navigate between fields</div>
                <div><kbd>Enter</kbd> Copy result</div>
                <div><kbd>Ctrl+Shift+S</kbd> Swap units</div>
                <div><kbd>Ctrl+H</kbd> Show history</div>
                <div><kbd>Ctrl+F</kbd> Add to favorites</div>
                <div><kbd>?</kbd> Show this help</div>
            </div>
        </div>
    </div>

    <!-- Email Capture Modal -->
    <div id="emailModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Get PROFESSIONAL Features</h3>
                <button class="close-btn">&times;</button>
            </div>
            <p>Subscribe to get notified about Pro features and updates:</p>
            <form class="contact-form" style="margin-top: 1rem;">
                <input type="email" placeholder="Enter your email" class="input-field" required>
                <button type="submit" class="btn btn-primary">Subscribe</button>
            </form>
        </div>
    </div>

    <!-- Custom Units Creator Modal -->
    <div id="customUnitModal" class="modal">
        <div class="modal-content" style="max-width: 500px;">
            <div class="modal-header">
                <h3>üîß Create Custom Unit</h3>
                <button class="close-btn" onclick="hideModal(document.getElementById('customUnitModal'))">&times;</button>
            </div>
            <div class="modal-body">
                <div style="background: #f0f9ff; border: 1px solid #0ea5e9; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem;">
                    <strong>üí° How it works:</strong><br>
                    Create a custom unit with its conversion ratio. For example, if 1 of your unit equals 2.5 meters, enter 2.5 as the ratio.
                </div>
                
                <div style="margin-bottom: 1rem;">
                    <label for="customUnitName" style="display: block; margin-bottom: 0.5rem; font-weight: bold;">Unit Name:</label>
                    <input type="text" id="customUnitName" placeholder="e.g., Football Fields" style="width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 0.5rem;">
                </div>
                
                <div style="margin-bottom: 1rem;">
                    <label for="customUnitSymbol" style="display: block; margin-bottom: 0.5rem; font-weight: bold;">Symbol/Abbreviation:</label>
                    <input type="text" id="customUnitSymbol" placeholder="e.g., ff" style="width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 0.5rem;">
                </div>
                
                <div style="margin-bottom: 1rem;">
                    <label for="customUnitRatio" style="display: block; margin-bottom: 0.5rem; font-weight: bold;">Conversion Ratio:</label>
                    <input type="number" id="customUnitRatio" placeholder="e.g., 91.44 (meters per football field)" step="any" style="width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 0.5rem;">
                    <small style="color: var(--text-secondary);">Enter the base unit value for 1 of your custom unit</small>
                </div>
                
                <div style="margin-bottom: 1rem;">
                    <label for="customUnitCategory" style="display: block; margin-bottom: 0.5rem; font-weight: bold;">Category:</label>
                    <select id="customUnitCategory" style="width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 0.5rem;">
                        <option value="length">Length</option>
                        <option value="weight">Weight</option>
                        <option value="volume">Volume</option>
                        <option value="area">Area</option>
                        <option value="time">Time</option>
                    </select>
                </div>
                
                <div style="display: flex; gap: 1rem;">
                    <button class="btn btn-secondary" onclick="hideModal(document.getElementById('customUnitModal'))" style="flex: 1;">
                        Cancel
                    </button>
                    <button class="btn btn-primary" onclick="createCustomUnit()" style="flex: 1;">
                        üîß Create Unit
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Export Options Modal -->
    <div id="exportModal" class="modal">
        <div class="modal-content" style="max-width: 450px;">
            <div class="modal-header">
                <h3>üì§ Export Your Data</h3>
                <button class="close-btn" onclick="hideModal(document.getElementById('exportModal'))">&times;</button>
            </div>
            <div class="modal-body">
                <div style="background: #f0f9ff; border: 1px solid #0ea5e9; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1.5rem;">
                    <strong>üìä What gets exported:</strong><br>
                    Current conversion, conversion history, and favorite units in your selected format.
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="margin-bottom: 1rem; color: var(--text-primary);">Choose Export Format:</h4>
                    
                    <div style="display: flex; flex-direction: column; gap: 0.75rem;">
                        <button class="btn btn-primary" onclick="exportResults('csv')" style="display: flex; align-items: center; justify-content: flex-start; gap: 0.75rem;">
                            <span style="font-size: 1.2rem;">üìà</span>
                            <div style="text-align: left;">
                                <strong>CSV (Spreadsheet)</strong><br>
                                <small>Perfect for Excel, Google Sheets, data analysis</small>
                            </div>
                        </button>
                        
                        <button class="btn btn-primary" onclick="exportResults('pdf')" style="display: flex; align-items: center; justify-content: flex-start; gap: 0.75rem;">
                            <span style="font-size: 1.2rem;">üìÑ</span>
                            <div style="text-align: left;">
                                <strong>PDF (Professional Report)</strong><br>
                                <small>Formatted report for sharing and printing</small>
                            </div>
                        </button>
                        
                        <button class="btn btn-primary" onclick="exportResults('txt')" style="display: flex; align-items: center; justify-content: flex-start; gap: 0.75rem;">
                            <span style="font-size: 1.2rem;">üìù</span>
                            <div style="text-align: left;">
                                <strong>Plain Text</strong><br>
                                <small>Simple text format for notes and documentation</small>
                            </div>
                        </button>
                    </div>
                </div>
                
                <button class="btn btn-secondary" onclick="hideModal(document.getElementById('exportModal'))" style="width: 100%;">
                    Cancel
                </button>
            </div>
        </div>
    </div>

    <!-- FAQ Modal -->
    <div id="faqModal" class="modal">
        <div class="modal-content" style="max-width: 800px;">
            <div class="modal-header">
                <h3>‚ùì Frequently Asked Questions</h3>
                <button class="close-btn" onclick="hideModal(document.getElementById('faqModal'))">&times;</button>
            </div>
            <div class="modal-body">
                <div class="faq-container">
                    <div class="faq-item">
                        <button class="faq-question" onclick="toggleFAQ(this)">
                            <span>How accurate are PrecisionConvert.io conversions?</span>
                            <span class="faq-icon">+</span>
                        </button>
                        <div class="faq-answer">
                            <p><strong>PrecisionConvert.io delivers industry-leading accuracy:</strong></p>
                            <ul>
                                <li>‚úÖ <strong>Up to 15 decimal places</strong> for Professional subscribers</li>
                                <li>‚úÖ <strong>Internationally accepted standards</strong> (NIST, ISO, SI)</li>
                                <li>‚úÖ <strong>Validated by engineers and scientists</strong> worldwide</li>
                                <li>‚úÖ <strong>Suitable for critical applications</strong> in engineering, research, and manufacturing</li>
                            </ul>
                            <p>Our conversion factors are regularly updated to maintain precision standards required by professionals.</p>
                        </div>
                    </div>

                    <div class="faq-item">
                        <button class="faq-question" onclick="toggleFAQ(this)">
                            <span>What's the difference between free and premium?</span>
                            <span class="faq-icon">+</span>
                        </button>
                        <div class="faq-answer">
                            <p><strong>Free Version:</strong></p>
                            <ul>
                                <li>Basic unit conversions (length, weight, temperature, volume, area, time)</li>
                                <li>Up to 2 decimal places precision</li>
                                <li>3 themes (Light, Dark, High Contrast)</li>
                                <li>Basic conversion history</li>
                            </ul>
                            <p><strong>PROFESSIONAL Version ($4.99/month):</strong></p>
                            <ul>
                                <li>Up to 15 decimal places precision</li>
                                <li>Custom Units Creator</li>
                                <li>Batch conversion with CSV import/export</li>
                                <li>3 premium themes (Scientific Blue, Engineering Orange, Minimalist Green)</li>
                                <li>Advanced export options (CSV, PDF, Text)</li>
                                <li>Unlimited conversion history</li>
                                <li>Priority support</li>
                            </ul>
                        </div>
                    </div>

                    <div class="faq-item">
                        <button class="faq-question" onclick="toggleFAQ(this)">
                            <span>Which units are supported?</span>
                            <span class="faq-icon">+</span>
                        </button>
                        <div class="faq-answer">
                            <p>We support comprehensive unit conversions across multiple categories:</p>
                            <ul>
                                <li><strong>Length:</strong> Millimeters, Centimeters, Meters, Kilometers, Inches, Feet, Yards, Miles</li>
                                <li><strong>Weight:</strong> Grams, Kilograms, Ounces, Pounds, Tons</li>
                                <li><strong>Temperature:</strong> Celsius, Fahrenheit, Kelvin</li>
                                <li><strong>Volume:</strong> Milliliters, Liters, Gallons, Fluid Ounces, Cups, Pints, Quarts</li>
                                <li><strong>Area:</strong> Square Meters, Square Feet, Acres, Hectares</li>
                                <li><strong>Time:</strong> Seconds, Minutes, Hours, Days, Weeks, Months, Years</li>
                                <li><strong>Plus Custom Units</strong> (Premium) - Create your own conversion ratios</li>
                            </ul>
                        </div>
                    </div>

                    <div class="faq-item">
                        <button class="faq-question" onclick="toggleFAQ(this)">
                            <span>How do I cancel my subscription?</span>
                            <span class="faq-icon">+</span>
                        </button>
                        <div class="faq-answer">
                            <p>You can cancel your premium subscription at any time through your Stripe customer portal:</p>
                            <ol>
                                <li>Click on your account/profile area</li>
                                <li>Select "Manage Subscription"</li>
                                <li>Choose "Cancel Subscription"</li>
                                <li>Your premium features will remain active until the end of your billing period</li>
                            </ol>
                            <p>Alternatively, contact us at <strong>rainking6693@gmail.com</strong> and we'll help you cancel immediately.</p>
                        </div>
                    </div>

                    <div class="faq-item">
                        <button class="faq-question" onclick="toggleFAQ(this)">
                            <span>Is my data secure and private?</span>
                            <span class="faq-icon">+</span>
                        </button>
                        <div class="faq-answer">
                            <p>Yes, your privacy and security are our top priorities:</p>
                            <ul>
                                <li><strong>Local Storage:</strong> All conversion history and custom units are stored locally in your browser</li>
                                <li><strong>No Data Collection:</strong> We don't collect or store your conversion data on our servers</li>
                                <li><strong>Secure Payments:</strong> All payments are processed securely through Stripe</li>
                                <li><strong>HTTPS Encryption:</strong> All communication is encrypted with SSL/TLS</li>
                                <li><strong>No Tracking:</strong> We don't use invasive analytics or tracking cookies</li>
                            </ul>
                        </div>
                    </div>

                    <div class="faq-item">
                        <button class="faq-question" onclick="toggleFAQ(this)">
                            <span>Can I use this offline?</span>
                            <span class="faq-icon">+</span>
                        </button>
                        <div class="faq-answer">
                            <p>Yes! PrecisionConvert.io includes a service worker that enables basic offline functionality. Once you've loaded the page, you can continue using the converter even without an internet connection. Your conversion history and custom units are stored locally.</p>
                        </div>
                    </div>

                    <div class="faq-item">
                        <button class="faq-question" onclick="toggleFAQ(this)">
                            <span>Do you offer refunds?</span>
                            <span class="faq-icon">+</span>
                        </button>
                        <div class="faq-answer">
                            <p>We offer a 7-day money-back guarantee for premium subscriptions. If you're not satisfied with the premium features within 7 days of your purchase, contact us at <strong>rainking6693@gmail.com</strong> for a full refund.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- About Modal -->
    <div id="aboutModal" class="modal">
        <div class="modal-content" style="max-width: 700px;">
            <div class="modal-header">
                <h3>‚ÑπÔ∏è About PrecisionConvert.io</h3>
                <button class="close-btn" onclick="hideModal(document.getElementById('aboutModal'))">&times;</button>
            </div>
            <div class="modal-body">
                <div style="text-align: center; margin-bottom: 2rem;">
                    <div style="font-size: 4rem; margin-bottom: 1rem;">üìè</div>
                    <h2 style="color: var(--primary-color); margin-bottom: 0.5rem;">PrecisionConvert.io</h2>
                    <p style="color: var(--text-secondary); font-size: 1.1rem;">Professional Unit Conversion Tool</p>
                </div>

                <div style="margin-bottom: 2rem;">
                    <h4 style="color: var(--primary-color); margin-bottom: 1rem;">üéØ Our Mission</h4>
                    <p>Built for engineers, scientists, and professionals who demand precision in their calculations. PrecisionConvert.io provides accurate, reliable unit conversions with the level of precision required for critical applications.</p>
                </div>

                <div style="margin-bottom: 2rem;">
                    <h4 style="color: var(--primary-color); margin-bottom: 1rem;">üî¨ Why PrecisionConvert.io?</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem;">
                        <div style="background: var(--surface-color); padding: 1rem; border-radius: 0.5rem;">
                            <strong>üéØ Precision First</strong>
                            <p>Up to 15 decimal places accuracy for professional applications</p>
                        </div>
                        <div style="background: var(--surface-color); padding: 1rem; border-radius: 0.5rem;">
                            <strong>üõ†Ô∏è Built for Professionals</strong>
                            <p>Designed by engineers for engineers, scientists, and technical professionals</p>
                        </div>
                        <div style="background: var(--surface-color); padding: 1rem; border-radius: 0.5rem;">
                            <strong>üîí Privacy Focused</strong>
                            <p>Your data stays in your browser - we don't collect or store conversion data</p>
                        </div>
                        <div style="background: var(--surface-color); padding: 1rem; border-radius: 0.5rem;">
                            <strong>‚ö° Fast & Reliable</strong>
                            <p>Instant conversions with offline capability and service worker support</p>
                        </div>
                    </div>
                </div>

                <div style="margin-bottom: 2rem;">
                    <h4 style="color: var(--primary-color); margin-bottom: 1rem;">üöÄ Technology</h4>
                    <p>PrecisionConvert.io is built with modern web technologies to ensure reliability and performance:</p>
                    <ul>
                        <li><strong>High-Precision Algorithms:</strong> Based on internationally accepted conversion standards</li>
                        <li><strong>Progressive Web App:</strong> Works offline with service worker technology</li>
                        <li><strong>Secure Architecture:</strong> Client-side processing with encrypted communication</li>
                        <li><strong>Responsive Design:</strong> Works perfectly on desktop, tablet, and mobile devices</li>
                        <li><strong>Modern Browser Support:</strong> Optimized for all major browsers</li>
                    </ul>
                </div>

                <div style="margin-bottom: 2rem;">
                    <h4 style="color: var(--primary-color); margin-bottom: 1rem;">üìä By the Numbers</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem;">
                        <div style="background: var(--surface-color); padding: 1rem; border-radius: 0.5rem; text-align: center;">
                            <div style="font-size: 2rem; font-weight: bold; color: var(--primary-color);">10,000+</div>
                            <div style="font-size: 0.9rem; color: var(--text-secondary);">Professional Users</div>
                        </div>
                        <div style="background: var(--surface-color); padding: 1rem; border-radius: 0.5rem; text-align: center;">
                            <div style="font-size: 2rem; font-weight: bold; color: var(--primary-color);">1,000+</div>
                            <div style="font-size: 0.9rem; color: var(--text-secondary);">Unit Types</div>
                        </div>
                        <div style="background: var(--surface-color); padding: 1rem; border-radius: 0.5rem; text-align: center;">
                            <div style="font-size: 2rem; font-weight: bold; color: var(--primary-color);">99.99%</div>
                            <div style="font-size: 0.9rem; color: var(--text-secondary);">Accuracy Rate</div>
                        </div>
                        <div style="background: var(--surface-color); padding: 1rem; border-radius: 0.5rem; text-align: center;">
                            <div style="font-size: 2rem; font-weight: bold; color: var(--primary-color);">24/7</div>
                            <div style="font-size: 0.9rem; color: var(--text-secondary);">Availability</div>
                        </div>
                    </div>
                </div>

                <div style="background: var(--surface-color); padding: 1.5rem; border-radius: 0.75rem; text-align: center;">
                    <h4 style="color: var(--primary-color); margin-bottom: 0.5rem;">üíº Trusted by Professionals Worldwide</h4>
                    <p style="margin-bottom: 1rem;">Engineers ‚Ä¢ Scientists ‚Ä¢ Researchers ‚Ä¢ Students ‚Ä¢ Contractors ‚Ä¢ Architects ‚Ä¢ Chefs ‚Ä¢ Developers</p>
                    <div style="display: flex; gap: 1rem; justify-content: center; margin-top: 1rem;">
                        <button class="btn btn-primary" onclick="hideModal(document.getElementById('aboutModal')); document.getElementById('upgradeBtn').scrollIntoView();">
                            üöÄ Upgrade to PROFESSIONAL
                        </button>
                        <button class="btn" onclick="hideModal(document.getElementById('aboutModal')); showContactModal();">
                            üìß Contact Support
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Contact Modal -->
    <div id="contactModal" class="modal">
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h3>üìß Contact Us</h3>
                <button class="close-btn" onclick="hideModal(document.getElementById('contactModal'))">&times;</button>
            </div>
            <div class="modal-body">
                <div style="background: #f0f9ff; border: 1px solid #0ea5e9; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1.5rem;">
                    <p><strong>üìû Professional Support & Contact</strong></p>
                    <p>Get expert help with unit conversions, technical questions, billing support, or partnership inquiries.</p>
                    <p><strong>üìß Direct Email:</strong> <a href="mailto:rainking6693@gmail.com" style="color: var(--primary-color);">rainking6693@gmail.com</a></p>
                    <p><strong>‚ö° Response Time:</strong> Typically within 24 hours (Priority support for Professional subscribers)</p>
                </div>

                <form class="contact-form" name="precisionconvert-contact" method="POST" data-netlify="true" data-netlify-recaptcha="true" action="/index.html?contact=success" onsubmit="handleContactForm(event)">
                    <input type="hidden" name="form-name" value="precisionconvert-contact">
                    <input type="hidden" name="to" value="rainking6693@gmail.com">
                    <input type="hidden" name="subject-prefix" value="[PrecisionConvert.io Contact]">
                    
                    <div style="margin-bottom: 1rem;">
                        <label for="contactName" style="display: block; margin-bottom: 0.5rem; font-weight: bold;">Your Name *</label>
                        <input type="text" id="contactName" name="name" placeholder="John Smith" required style="width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 0.5rem;">
                    </div>
                    
                    <div style="margin-bottom: 1rem;">
                        <label for="contactEmail" style="display: block; margin-bottom: 0.5rem; font-weight: bold;">Email Address *</label>
                        <input type="email" id="contactEmail" name="email" placeholder="john@example.com" required style="width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 0.5rem;">
                    </div>
                    
                    <div style="margin-bottom: 1rem;">
                        <label for="contactSubject" style="display: block; margin-bottom: 0.5rem; font-weight: bold;">Subject *</label>
                        <select id="contactSubject" name="subject" required style="width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 0.5rem;">
                            <option value="">Select a topic...</option>
                            <option value="General Question">General Question</option>
                            <option value="Premium Support">Premium Support</option>
                            <option value="Bug Report">Bug Report</option>
                            <option value="Feature Request">Feature Request</option>
                            <option value="Billing Issue">Billing Issue</option>
                            <option value="Refund Request">Refund Request</option>
                            <option value="Technical Support">Technical Support</option>
                            <option value="Partnership Inquiry">Partnership Inquiry</option>
                        </select>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <label for="contactMessage" style="display: block; margin-bottom: 0.5rem; font-weight: bold;">Message *</label>
                        <textarea id="contactMessage" name="message" placeholder="Please describe your question or issue in detail..." required rows="5" style="width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 0.5rem; resize: vertical;"></textarea>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div data-netlify-recaptcha="true"></div>
                    </div>
                    
                    <div style="display: flex; gap: 1rem;">
                        <button type="button" class="btn btn-secondary" onclick="hideModal(document.getElementById('contactModal'))" style="flex: 1;">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" style="flex: 1;">
                            üìß Send Message
                        </button>
                    </div>
                </form>

                <div style="margin-top: 2rem; padding-top: 1.5rem; border-top: 1px solid var(--border-color); text-align: center;">
                    <p style="color: var(--text-secondary); margin-bottom: 0.5rem;">Or reach us directly:</p>
                    <p><strong>Email:</strong> <a href="mailto:rainking6693@gmail.com" style="color: var(--primary-color);">rainking6693@gmail.com</a></p>
                    <p style="font-size: 0.9rem; color: var(--text-secondary);">We typically respond within 24 hours</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Version Control and Cache Busting (Fixed - no auto-refresh)
        const APP_VERSION = '2.2.0';
        const BUILD_TIMESTAMP = '2025-01-21T12:00:00Z'; // Fixed timestamp, not dynamic
        
        // Check for version updates (only on major version changes)
        function checkForUpdates() {
            const storedVersion = localStorage.getItem('app_version');
            
            // Only check version, not timestamp to prevent constant refreshes
            if (storedVersion && storedVersion !== APP_VERSION) {
                console.log('üîÑ Major version change detected:', storedVersion, '->', APP_VERSION);
                
                // Clear caches only on actual version changes
                if ('caches' in window) {
                    caches.keys().then(names => {
                        names.forEach(name => {
                            caches.delete(name);
                        });
                    });
                }
            }
            
            // Always update stored version (but don't reload)
            localStorage.setItem('app_version', APP_VERSION);
            localStorage.setItem('build_timestamp', BUILD_TIMESTAMP);
        }
        
        // Initialize premium state from localStorage with persistence check
        function initializePremiumState() {
            // Check multiple sources for premium status
            const isPremiumLS1 = localStorage.getItem('isPremium') === 'true';
            const isPremiumLS2 = localStorage.getItem('is_premium') === 'true';
            const subscriptionStatus = localStorage.getItem('subscriptionStatus') === 'active';
            const subscriptionDate = localStorage.getItem('subscription_date');
            
            // Validate subscription hasn't expired (if date is set)
            let isValid = true;
            if (subscriptionDate) {
                const subDate = new Date(subscriptionDate);
                const now = new Date();
                const daysDiff = (now - subDate) / (1000 * 60 * 60 * 24);
                isValid = daysDiff < 365; // Consider premium valid for 1 year
            }
            
            const isPremium = (isPremiumLS1 || isPremiumLS2 || subscriptionStatus) && isValid;
            
            if (isPremium) {
                console.log('üîê Restored premium state from localStorage');
                console.log('  - isPremium:', isPremiumLS1);
                console.log('  - is_premium:', isPremiumLS2);
                console.log('  - subscription:', subscriptionStatus);
                console.log('  - valid:', isValid);
                
                // Ensure all flags are consistent
                localStorage.setItem('isPremium', 'true');
                localStorage.setItem('is_premium', 'true');
                if (subscriptionStatus) {
                    localStorage.setItem('subscriptionStatus', 'active');
                }
                
                return true;
            } else {
                console.log('üîí No valid premium state found');
                return false;
            }
        }
        
        // Persist premium state with multiple backup methods
        function persistPremiumState() {
            const timestamp = new Date().toISOString();
            
            localStorage.setItem('isPremium', 'true');
            localStorage.setItem('is_premium', 'true');
            localStorage.setItem('subscriptionStatus', 'active');
            localStorage.setItem('subscription_date', timestamp);
            localStorage.setItem('premium_activated_at', timestamp);
            localStorage.setItem('app_version_when_activated', APP_VERSION);
            
            console.log('üíæ Premium state persisted with timestamp:', timestamp);
        }
        
        // Force refresh function for debugging
        window.forceRefresh = function() {
            localStorage.setItem('force_refresh', Date.now().toString());
            if ('caches' in window) {
                caches.keys().then(names => {
                    names.forEach(name => {
                        caches.delete(name);
                        console.log('üóëÔ∏è Cache cleared:', name);
                    });
                });
            }
            setTimeout(() => {
                window.location.reload(true);
            }, 100);
        };
        
        // Initialize version tracking (but don't auto-refresh)
        localStorage.setItem('app_version', APP_VERSION);
        localStorage.setItem('build_timestamp', BUILD_TIMESTAMP);
        
        // Unit definitions
        const units = {
            length: {
                millimeter: { name: 'Millimeters', symbol: 'mm', factor: 0.001 },
                centimeter: { name: 'Centimeters', symbol: 'cm', factor: 0.01 },
                meter: { name: 'Meters', symbol: 'm', factor: 1 },
                kilometer: { name: 'Kilometers', symbol: 'km', factor: 1000 },
                inch: { name: 'Inches', symbol: 'in', factor: 0.0254 },
                foot: { name: 'Feet', symbol: 'ft', factor: 0.3048 },
                yard: { name: 'Yards', symbol: 'yd', factor: 0.9144 },
                mile: { name: 'Miles', symbol: 'mi', factor: 1609.344 }
            },
            weight: {
                milligram: { name: 'Milligrams', symbol: 'mg', factor: 0.000001 },
                gram: { name: 'Grams', symbol: 'g', factor: 0.001 },
                kilogram: { name: 'Kilograms', symbol: 'kg', factor: 1 },
                pound: { name: 'Pounds', symbol: 'lb', factor: 0.453592 },
                ounce: { name: 'Ounces', symbol: 'oz', factor: 0.0283495 },
                stone: { name: 'Stones', symbol: 'st', factor: 6.35029 }
            },
            temperature: {
                celsius: { name: 'Celsius', symbol: '¬∞C' },
                fahrenheit: { name: 'Fahrenheit', symbol: '¬∞F' },
                kelvin: { name: 'Kelvin', symbol: 'K' }
            },
            volume: {
                milliliter: { name: 'Milliliters', symbol: 'ml', factor: 0.001 },
                liter: { name: 'Liters', symbol: 'L', factor: 1 },
                gallon_us: { name: 'Gallons (US)', symbol: 'gal US', factor: 3.78541 },
                gallon_uk: { name: 'Gallons (UK)', symbol: 'gal UK', factor: 4.54609 },
                cup: { name: 'Cups', symbol: 'cup', factor: 0.236588 },
                fluid_ounce: { name: 'Fluid Ounces', symbol: 'fl oz', factor: 0.0295735 }
            },
            area: {
                square_millimeter: { name: 'Square Millimeters', symbol: 'mm¬≤', factor: 0.000001 },
                square_centimeter: { name: 'Square Centimeters', symbol: 'cm¬≤', factor: 0.0001 },
                square_meter: { name: 'Square Meters', symbol: 'm¬≤', factor: 1 },
                square_kilometer: { name: 'Square Kilometers', symbol: 'km¬≤', factor: 1000000 },
                square_inch: { name: 'Square Inches', symbol: 'in¬≤', factor: 0.00064516 },
                square_foot: { name: 'Square Feet', symbol: 'ft¬≤', factor: 0.092903 },
                acre: { name: 'Acres', symbol: 'ac', factor: 4046.86 }
            },
            time: {
                second: { name: 'Seconds', symbol: 's', factor: 1 },
                minute: { name: 'Minutes', symbol: 'min', factor: 60 },
                hour: { name: 'Hours', symbol: 'h', factor: 3600 },
                day: { name: 'Days', symbol: 'd', factor: 86400 },
                week: { name: 'Weeks', symbol: 'wk', factor: 604800 },
                month: { name: 'Months', symbol: 'mo', factor: 2629746 },
                year: { name: 'Years', symbol: 'yr', factor: 31556952 }
            },
            // PROFESSIONAL CATEGORIES - Premium Only ($4.99/month)
            cooking: {
                // Precise cooking volume measurements (based on liters)
                teaspoon: { name: 'Teaspoons (US)', symbol: 'tsp', factor: 0.00492892, professional: true },
                teaspoon_metric: { name: 'Teaspoons (Metric)', symbol: 'tsp metric', factor: 0.005, professional: true },
                tablespoon: { name: 'Tablespoons (US)', symbol: 'tbsp', factor: 0.01478676, professional: true },
                tablespoon_metric: { name: 'Tablespoons (Metric)', symbol: 'tbsp metric', factor: 0.015, professional: true },
                
                fluid_ounce: { name: 'Fluid Ounces (US)', symbol: 'fl oz', factor: 0.0295735, professional: true },
                fluid_ounce_uk: { name: 'Fluid Ounces (UK)', symbol: 'fl oz UK', factor: 0.0284131, professional: true },
                
                cup: { name: 'Cups (US)', symbol: 'cup US', factor: 0.236588, professional: true },
                cup_metric: { name: 'Cups (Metric)', symbol: 'cup metric', factor: 0.25, professional: true },
                cup_uk: { name: 'Cups (UK)', symbol: 'cup UK', factor: 0.284131, professional: true },
                
                pint_us: { name: 'Pints (US liquid)', symbol: 'pt US', factor: 0.473176, professional: true },
                pint_uk: { name: 'Pints (UK)', symbol: 'pt UK', factor: 0.568261, professional: true },
                
                quart_us: { name: 'Quarts (US liquid)', symbol: 'qt US', factor: 0.946353, professional: true },
                quart_uk: { name: 'Quarts (UK)', symbol: 'qt UK', factor: 1.136523, professional: true },
                
                gallon_us: { name: 'Gallons (US)', symbol: 'gal US', factor: 3.785412, professional: true },
                gallon_uk: { name: 'Gallons (UK)', symbol: 'gal UK', factor: 4.546092, professional: true },
                
                milliliter: { name: 'Milliliters', symbol: 'mL', factor: 0.001, professional: true },
                liter: { name: 'Liters', symbol: 'L', factor: 1, professional: true },
                
                // Small measurements
                pinch: { name: 'Pinches', symbol: 'pinch', factor: 0.0006161, professional: true, description: '1/8 tsp' },
                dash: { name: 'Dashes', symbol: 'dash', factor: 0.0012322, professional: true, description: '1/4 tsp' },
                smidgen: { name: 'Smidgens', symbol: 'smidgen', factor: 0.0003081, professional: true, description: '1/16 tsp' },
                
                // Baker's measurements
                
                // Specialized butter measurements
                stick_butter: { name: 'Sticks of Butter', symbol: 'stick', factor: 0.118294, professional: true, description: '8 tbsp = 113g = 1/2 cup' },
                half_stick_butter: { name: 'Half Stick Butter', symbol: '1/2 stick', factor: 0.059147, professional: true },
                
                // Flour types (weight conversions)
                flour_ap: { name: 'All-Purpose Flour (cups)', symbol: 'cup AP flour', factor: 0.120, professional: true, description: '120g per cup' },
                flour_bread: { name: 'Bread Flour (cups)', symbol: 'cup bread flour', factor: 0.127, professional: true, description: '127g per cup' },
                flour_cake: { name: 'Cake Flour (cups)', symbol: 'cup cake flour', factor: 0.114, professional: true, description: '114g per cup' },
                flour_pastry: { name: 'Pastry Flour (cups)', symbol: 'cup pastry flour', factor: 0.108, professional: true, description: '108g per cup' },
                
                // International baking conversions
                gill: { name: 'Gills (UK)', symbol: 'gill', factor: 0.142065, professional: true },
                fluid_ounce_uk: { name: 'Fluid Ounces (UK)', symbol: 'fl oz UK', factor: 0.0284131, professional: true },
                pint_uk: { name: 'Pints (UK)', symbol: 'pt UK', factor: 0.568261, professional: true },
                
                // Recipe scaling helpers
                serving_4: { name: 'Recipe for 4', symbol: '4 servings', factor: 1, professional: true, description: 'Base recipe size' },
                serving_6: { name: 'Recipe for 6', symbol: '6 servings', factor: 1.5, professional: true },
                serving_8: { name: 'Recipe for 8', symbol: '8 servings', factor: 2, professional: true },
                serving_12: { name: 'Recipe for 12', symbol: '12 servings', factor: 3, professional: true },
                
                // Oven temperature conversions (handled separately in temperature category)
                gas_mark_1: { name: 'Gas Mark 1', symbol: 'GM1', factor: 275, professional: true, description: '275¬∞F / 140¬∞C' },
                gas_mark_2: { name: 'Gas Mark 2', symbol: 'GM2', factor: 300, professional: true, description: '300¬∞F / 150¬∞C' },
                gas_mark_3: { name: 'Gas Mark 3', symbol: 'GM3', factor: 325, professional: true, description: '325¬∞F / 160¬∞C' },
                gas_mark_4: { name: 'Gas Mark 4', symbol: 'GM4', factor: 350, professional: true, description: '350¬∞F / 180¬∞C' },
                gas_mark_5: { name: 'Gas Mark 5', symbol: 'GM5', factor: 375, professional: true, description: '375¬∞F / 190¬∞C' },
                gas_mark_6: { name: 'Gas Mark 6', symbol: 'GM6', factor: 400, professional: true, description: '400¬∞F / 200¬∞C' },
                gas_mark_7: { name: 'Gas Mark 7', symbol: 'GM7', factor: 425, professional: true, description: '425¬∞F / 220¬∞C' },
                gas_mark_8: { name: 'Gas Mark 8', symbol: 'GM8', factor: 450, professional: true, description: '450¬∞F / 230¬∞C' },
                gas_mark_9: { name: 'Gas Mark 9', symbol: 'GM9', factor: 475, professional: true, description: '475¬∞F / 240¬∞C' }
            },
            scientific: {
                // Laboratory volume measurements (based on liters)
                microliter: { name: 'Microliters', symbol: 'ŒºL', factor: 0.000001, professional: true },
                nanoliter: { name: 'Nanoliters', symbol: 'nL', factor: 0.000000001, professional: true },
                picoliter: { name: 'Picoliters', symbol: 'pL', factor: 0.000000000001, professional: true },
                femtoliter: { name: 'Femtoliters', symbol: 'fL', factor: 0.000000000000001, professional: true },
                
                // Standard laboratory volumes
                drop: { name: 'Drops (medical)', symbol: 'gtt', factor: 0.00005, professional: true, description: '~0.05 mL' },
                dram_fluid: { name: 'Fluid Drams', symbol: 'fl dr', factor: 0.003697, professional: true },
                minim: { name: 'Minims', symbol: 'min', factor: 0.000061612, professional: true },
                
                // Precise measurement units
                lambda: { name: 'Lambda (Œª)', symbol: 'Œª', factor: 0.000001, professional: true, description: 'microliter' },
                
                // Laboratory glassware standard volumes
                test_tube: { name: 'Test Tube (standard)', symbol: 'tube', factor: 0.01, professional: true, description: '10 mL' },
                petri_dish: { name: 'Petri Dish', symbol: 'dish', factor: 0.025, professional: true, description: '25 mL' },
                erlenmeyer_125: { name: 'Erlenmeyer 125mL', symbol: 'flask', factor: 0.125, professional: true },
                erlenmeyer_250: { name: 'Erlenmeyer 250mL', symbol: 'flask', factor: 0.25, professional: true },
                beaker_100: { name: 'Beaker 100mL', symbol: 'beaker', factor: 0.1, professional: true },
                beaker_250: { name: 'Beaker 250mL', symbol: 'beaker', factor: 0.25, professional: true },
                
                // Note: Concentration units (molarity, etc.) removed as they require different base units
                millimole: { name: 'Millimoles', symbol: 'mmol', factor: 0.001, professional: true },
                mole: { name: 'Moles', symbol: 'mol', factor: 1, professional: true },
                kilomole: { name: 'Kilomoles', symbol: 'kmol', factor: 1000, professional: true },
                
                // Chemistry - Atomic scale
                atomic_mass_unit: { name: 'Atomic Mass Units', symbol: 'u', factor: 1.66054e-27, professional: true, description: 'daltons' },
                dalton: { name: 'Daltons', symbol: 'Da', factor: 1.66054e-27, professional: true },
                
                // pH scale (logarithmic - needs special handling)
                ph_units: { name: 'pH Units', symbol: 'pH', factor: 1, professional: true, description: '-log[H+]' },
                
                // Physics - Length
                angstrom: { name: 'Angstroms', symbol: '√Ö', factor: 0.0000000001, professional: true },
                nanometer: { name: 'Nanometers', symbol: 'nm', factor: 0.000000001, professional: true },
                micrometer: { name: 'Micrometers', symbol: 'Œºm', factor: 0.000001, professional: true },
                
                // Physics - Energy
                electron_volt: { name: 'Electron Volts', symbol: 'eV', factor: 1.602176634e-19, professional: true },
                kilo_electron_volt: { name: 'Kilo Electron Volts', symbol: 'keV', factor: 1.602176634e-16, professional: true },
                mega_electron_volt: { name: 'Mega Electron Volts', symbol: 'MeV', factor: 1.602176634e-13, professional: true },
                joule: { name: 'Joules', symbol: 'J', factor: 1, professional: true },
                erg: { name: 'Ergs', symbol: 'erg', factor: 1e-7, professional: true },
                
                // Physics - Magnetic field
                tesla: { name: 'Tesla', symbol: 'T', factor: 1, professional: true },
                gauss: { name: 'Gauss', symbol: 'G', factor: 0.0001, professional: true },
                
                // Physics - Pressure
                pascal: { name: 'Pascals', symbol: 'Pa', factor: 1, professional: true },
                kilopascal: { name: 'Kilopascals', symbol: 'kPa', factor: 1000, professional: true },
                bar: { name: 'Bars', symbol: 'bar', factor: 100000, professional: true },
                millibar: { name: 'Millibars', symbol: 'mbar', factor: 100, professional: true },
                torr: { name: 'Torr', symbol: 'Torr', factor: 133.322, professional: true },
                mmhg: { name: 'mmHg', symbol: 'mmHg', factor: 133.322, professional: true },
                atmosphere: { name: 'Atmospheres', symbol: 'atm', factor: 101325, professional: true },
                psi: { name: 'PSI', symbol: 'psi', factor: 6894.76, professional: true },
                
                // Physics - Light
                lumen: { name: 'Lumens', symbol: 'lm', factor: 1, professional: true },
                candela: { name: 'Candelas', symbol: 'cd', factor: 1, professional: true },
                lux: { name: 'Lux', symbol: 'lx', factor: 1, professional: true },
                
                // Physics - Sound
                decibel: { name: 'Decibels', symbol: 'dB', factor: 1, professional: true, description: 'logarithmic scale' },
                bel: { name: 'Bels', symbol: 'B', factor: 10, professional: true }
            },
            historical: {
                // Ancient units
                cubit: { name: 'Cubits (Royal Egyptian)', symbol: 'cubit', factor: 0.525, professional: true, description: '~20.6 inches' },
                cubit_common: { name: 'Cubits (Common)', symbol: 'cubit', factor: 0.4572, professional: true, description: '~18 inches' },
                talent: { name: 'Talents (Attic)', symbol: 'talent', factor: 25.86, professional: true, description: '~57 lbs weight' },
                talent_roman: { name: 'Talents (Roman)', symbol: 'talent Roman', factor: 32.3, professional: true, description: '~71 lbs weight' },
                amphora: { name: 'Amphorae (Roman)', symbol: 'amphora', factor: 26.026, professional: true, description: '~6.9 gallons' },
                stadion: { name: 'Stadia (Greek)', symbol: 'stadion', factor: 184.9, professional: true, description: '~607 feet' },
                stadium_roman: { name: 'Stadia (Roman)', symbol: 'stadium', factor: 185, professional: true, description: '~607 feet' },
                mina: { name: 'Minas (Attic)', symbol: 'mina', factor: 0.431, professional: true, description: '~0.95 lbs' },
                shekel: { name: 'Shekels (Hebrew)', symbol: 'shekel', factor: 0.01143, professional: true, description: '~0.4 oz' },
                
                // Medieval units
                rod: { name: 'Rods', symbol: 'rod', factor: 5.0292, professional: true, description: '16.5 feet' },
                perch: { name: 'Perches', symbol: 'perch', factor: 5.0292, professional: true, description: 'same as rod' },
                pole: { name: 'Poles', symbol: 'pole', factor: 5.0292, professional: true, description: 'same as rod' },
                chain: { name: 'Chains', symbol: 'chain', factor: 20.1168, professional: true, description: '4 rods = 66 feet' },
                furlong: { name: 'Furlongs', symbol: 'furlong', factor: 201.168, professional: true, description: '10 chains = 660 feet' },
                league: { name: 'Leagues', symbol: 'league', factor: 4828.032, professional: true, description: '3 miles' },
                fathom: { name: 'Fathoms', symbol: 'fathom', factor: 1.8288, professional: true, description: '6 feet (nautical)' },
                
                // Body-based measurements
                hand: { name: 'Hands', symbol: 'hand', factor: 0.1016, professional: true, description: '4 inches (horse height)' },
                span: { name: 'Spans', symbol: 'span', factor: 0.2286, professional: true, description: '9 inches (hand span)' },
                pace: { name: 'Paces', symbol: 'pace', factor: 0.762, professional: true, description: '30 inches (Roman)' },
                ell: { name: 'Ells', symbol: 'ell', factor: 1.143, professional: true, description: '45 inches (English)' },
                digit: { name: 'Digits', symbol: 'digit', factor: 0.01905, professional: true, description: '3/4 inch (finger width)' },
                palm: { name: 'Palms', symbol: 'palm', factor: 0.0762, professional: true, description: '3 inches' },
                
                // Weight - Historical
                stone: { name: 'Stones', symbol: 'st', factor: 6.35029, professional: true, description: '14 pounds (UK)' },
                grain: { name: 'Grains', symbol: 'gr', factor: 0.00006479891, professional: true, description: '1/7000 pound' },
                scruple: { name: 'Scruples', symbol: 'scruple', factor: 0.001296, professional: true, description: '20 grains' },
                dram: { name: 'Drams', symbol: 'dr', factor: 0.001772, professional: true, description: '60 grains' },
                pennyweight: { name: 'Pennyweights', symbol: 'dwt', factor: 0.00155517, professional: true, description: '24 grains' },
                troy_ounce: { name: 'Troy Ounces', symbol: 'oz t', factor: 0.0311035, professional: true, description: '31.1 grams' },
                
                // Regional units
                li_chinese: { name: 'Li (Chinese)', symbol: 'li', factor: 500, professional: true, description: '~0.31 miles' },
                zhang: { name: 'Zhang (Chinese)', symbol: 'zhang', factor: 3.33, professional: true, description: '~10.9 feet' },
                chi: { name: 'Chi (Chinese)', symbol: 'chi', factor: 0.333, professional: true, description: '~13 inches' },
                shaku: { name: 'Shaku (Japanese)', symbol: 'shaku', factor: 0.303, professional: true, description: '~11.9 inches' },
                ken: { name: 'Ken (Japanese)', symbol: 'ken', factor: 1.818, professional: true, description: '6 shaku' },
                ri_japanese: { name: 'Ri (Japanese)', symbol: 'ri', factor: 3927.27, professional: true, description: '~2.44 miles' },
                cho: { name: 'Cho (Japanese)', symbol: 'cho', factor: 109.09, professional: true, description: '60 ken' }
            },
            programming: {
                // Base units in bits
                bit: { name: 'Bits', symbol: 'bit', factor: 1, professional: true },
                byte: { name: 'Bytes', symbol: 'B', factor: 8, professional: true },
                
                // Decimal units (SI prefixes) - base 1000
                kilobyte: { name: 'Kilobytes (decimal)', symbol: 'KB', factor: 8000, professional: true },
                megabyte: { name: 'Megabytes (decimal)', symbol: 'MB', factor: 8000000, professional: true },
                gigabyte: { name: 'Gigabytes (decimal)', symbol: 'GB', factor: 8000000000, professional: true },
                terabyte: { name: 'Terabytes (decimal)', symbol: 'TB', factor: 8000000000000, professional: true },
                petabyte: { name: 'Petabytes (decimal)', symbol: 'PB', factor: 8000000000000000, professional: true },
                
                // Binary units (IEC prefixes) - base 1024
                kibibyte: { name: 'Kibibytes (binary)', symbol: 'KiB', factor: 8192, professional: true },
                mebibyte: { name: 'Mebibytes (binary)', symbol: 'MiB', factor: 8388608, professional: true },
                gibibyte: { name: 'Gibibytes (binary)', symbol: 'GiB', factor: 8589934592, professional: true },
                tebibyte: { name: 'Tebibytes (binary)', symbol: 'TiB', factor: 8796093022208, professional: true },
                pebibyte: { name: 'Pebibytes (binary)', symbol: 'PiB', factor: 9007199254740992, professional: true },
                
                // Word sizes
                word_16: { name: 'Words (16-bit)', symbol: '16-bit word', factor: 16, professional: true },
                word_32: { name: 'Words (32-bit)', symbol: '32-bit word', factor: 32, professional: true },
                word_64: { name: 'Words (64-bit)', symbol: '64-bit word', factor: 64, professional: true }
            }
        };

        // Application state
        let currentCategory = 'length';
        let conversionHistory = JSON.parse(localStorage.getItem('conversionHistory') || '[]');
        let favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
        let conversionCount = parseInt(localStorage.getItem('conversionCount') || '0');
        let currentTheme = localStorage.getItem('theme') || 'light';
        // Initialize premium state with persistence check
        let isPremiumUser = initializePremiumState();
        let subscriptionStatus = localStorage.getItem('subscriptionStatus') || 'free';
        let trialEndDate = localStorage.getItem('trialEndDate');

        // Premium activation functions
        function checkPremiumActivation() {
            const urlParams = new URLSearchParams(window.location.search);
            
            // Contact success parameter
            if (urlParams.get('contact') === 'success') {
                showNotification('‚úÖ Message sent successfully! We\'ll respond within 24 hours.');
                // Clean URL
                window.history.replaceState({}, document.title, window.location.pathname);
            }
            
            // Premium URL parameter
            if (urlParams.get('premium') === 'true') {
                activatePremiumMode('URL parameter');
                // Clean URL
                window.history.replaceState({}, document.title, window.location.pathname);
            }
            
            // Console activation function
            window.activatePremium = function() {
                activatePremiumMode('Console activation');
                console.log('‚úÖ Premium mode activated! All features unlocked.');
                console.log('üéØ Try setting precision to 15 places, using export, etc.');
                location.reload(); // Refresh to apply changes
            };
            
            // Console deactivation function for testing
            window.deactivatePremium = function() {
                localStorage.removeItem('isPremium');
                localStorage.removeItem('is_premium');
                localStorage.removeItem('subscriptionStatus');
                localStorage.removeItem('subscription_date');
                localStorage.removeItem('session_id');
                isPremiumUser = false;
                subscriptionStatus = 'free';
                console.log('‚ùå Premium mode deactivated.');
                location.reload(); // Refresh to apply changes
            };
            
            // Show current status
            window.checkPremiumStatus = function() {
                console.log('üîç Premium Status Check:');
                console.log('isPremiumUser:', isPremiumUser);
                console.log('subscriptionStatus:', subscriptionStatus);
                console.log('localStorage isPremium:', localStorage.getItem('isPremium'));
                console.log('localStorage is_premium:', localStorage.getItem('is_premium'));
            };
        }
        
        function activatePremiumMode(source) {
            isPremiumUser = true;
            subscriptionStatus = 'active';
            
            // Persist premium state with enhanced backup
            persistPremiumState();
            
            console.log('üéâ Premium activated via:', source);
            console.log('üîß Activating premium features...');
            
            // Update all UI components immediately
            updateUIForPremiumUser();
            updateBatchConverter();
            populateUnits(); // Refresh units to show custom unit options
            
            console.log('‚úÖ Premium features activated:');
            console.log('  üé® Theme Selector: Premium themes unlocked');
            console.log('  üîß Custom Units: "CREATE CUSTOM UNIT" added to dropdowns');
            console.log('  üì§ Export: CSV, PDF, Text formats available');
            console.log('  üíé Precision: All precision levels unlocked');
            console.log('  üìä Batch Converter: Full interface activated');
            console.log('  üíæ State persistence: Enhanced for browser restart');
            
            // Show success notification
            showNotification('‚úÖ Premium features activated! Features will persist after browser restart.');
        }
        
        function updatePremiumIndicators() {
            // Update all premium badges and indicators based on current premium status
            const premiumBadges = document.querySelectorAll('.premium-badge');
            const premiumFeatures = document.querySelectorAll('.premium-feature');
            
            premiumBadges.forEach(badge => {
                if (isPremiumUser) {
                    if (badge.classList.contains('pro')) {
                        badge.textContent = '‚úÖ ACTIVE';
                        badge.classList.remove('pro');
                        badge.style.background = '#22c55e';
                    }
                } else {
                    if (badge.textContent === '‚úÖ ACTIVE') {
                        badge.textContent = 'PRO';
                        badge.classList.add('pro');
                        badge.style.background = '#f59e0b';
                    }
                }
            });
            
            premiumFeatures.forEach(feature => {
                if (isPremiumUser) {
                    feature.classList.add('unlocked');
                } else {
                    feature.classList.remove('unlocked');
                }
            });
        }

        function updateUIForPremiumUser() {
            if (!isPremiumUser) return;
            
            // Show premium features banner
            const premiumBar = document.getElementById('premiumFeaturesBar');
            if (premiumBar) {
                premiumBar.style.display = 'block';
            }
            
            // Update precision selector to show all options are available
            const precisionSelect = document.getElementById('precision');
            if (precisionSelect) {
                // Remove pro labels and make all options available
                const options = precisionSelect.querySelectorAll('option');
                options.forEach(option => {
                    if (option.value > 2) {
                        option.textContent = option.textContent.replace(' üíé PREMIUM', ' ‚úÖ PREMIUM');
                        option.disabled = false;
                    }
                });
            }
            
            // Update theme options for premium users
            updateThemeOptions();
            
            // Update premium indicators
            updatePremiumIndicators();
            
            // Update upgrade buttons to show premium status
            const upgradeBtn = document.getElementById('upgradeBtn');
            if (upgradeBtn) {
                upgradeBtn.innerHTML = '‚úÖ Premium Active';
                upgradeBtn.style.background = '#22c55e';
                upgradeBtn.style.cursor = 'default';
                upgradeBtn.onclick = null;
            }
            
            // Hide unlock precision button
            const unlockBtn = document.getElementById('unlockPrecisionBtn');
            if (unlockBtn) {
                unlockBtn.style.display = 'none';
            }
            
            // Update other upgrade prompts
            const upgradeButtons = document.querySelectorAll('.btn');
            upgradeButtons.forEach(btn => {
                if (btn.textContent.includes('Upgrade') || btn.textContent.includes('Learn More') || btn.textContent.includes('Unlock')) {
                    if (btn.id !== 'upgradeBtn' && btn.id !== 'unlockPrecisionBtn') {
                        btn.innerHTML = '‚úÖ Premium Active';
                        btn.disabled = true;
                        btn.style.background = '#22c55e';
                        btn.style.cursor = 'default';
                    }
                }
            });
            
            // Hide upgrade banner
            const upgradeBanner = document.querySelector('.upgrade-banner');
            if (upgradeBanner) {
                upgradeBanner.style.display = 'none';
            }
            
            // Show premium badge in header
            const headerControls = document.querySelector('.nav-controls');
            if (headerControls && !document.getElementById('premiumBadge')) {
                const premiumBadge = document.createElement('div');
                premiumBadge.id = 'premiumBadge';
                premiumBadge.innerHTML = '‚úÖ Premium';
                premiumBadge.style.cssText = 'background: linear-gradient(135deg, #22c55e, #16a34a); color: white; padding: 0.5rem 1rem; border-radius: 0.5rem; font-weight: 600; margin-right: 1rem; font-size: 0.9rem;';
                headerControls.insertBefore(premiumBadge, headerControls.firstChild);
            }
            
            // Update batch converter to show actual functionality
            updateBatchConverter();
        }
        
        function updateBatchConverter() {
            const batchCard = document.getElementById('batchConverterCard');
            if (!batchCard) return;
            
            if (isPremiumUser) {
                // Show actual batch converter interface
                batchCard.innerHTML = `
                    <span class="feature-icon">üìä</span>
                    <h3>Batch Converter <span style="background: #22c55e; color: white; padding: 0.2rem 0.5rem; border-radius: 0.25rem; font-size: 0.7rem;">‚úÖ ACTIVE</span></h3>
                    <p>Convert multiple values at once with CSV import/export</p>
                    
                    <div style="margin-top: 1rem;">
                        <label for="batchFile" class="btn btn-secondary" style="display: inline-block; cursor: pointer; margin-bottom: 0.5rem;">
                            üìÅ Upload CSV File
                        </label>
                        <input type="file" id="batchFile" accept=".csv,.txt" style="display: none;" onchange="handleBatchFile(event)">
                        
                        <div style="margin: 1rem 0;">
                            <label>From Unit:</label>
                            <select id="batchFromUnit" class="select-field" style="margin: 0.5rem;">
                                <option value="meters">Meters</option>
                                <option value="feet">Feet</option>
                                <option value="inches">Inches</option>
                                <option value="kilometers">Kilometers</option>
                                <option value="miles">Miles</option>
                            </select>
                            
                            <label>To Unit:</label>
                            <select id="batchToUnit" class="select-field" style="margin: 0.5rem;">
                                <option value="feet">Feet</option>
                                <option value="meters">Meters</option>
                                <option value="inches">Inches</option>
                                <option value="kilometers">Kilometers</option>
                                <option value="miles">Miles</option>
                            </select>
                        </div>
                        
                        <textarea id="batchInput" placeholder="Enter values separated by commas or new lines:&#10;1.5, 2.3, 4.7&#10;Or upload a CSV file above" 
                                  style="width: 100%; height: 80px; margin: 0.5rem 0; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;"></textarea>
                        
                        <div style="margin-top: 1rem;">
                            <button class="btn btn-primary" onclick="processBatchConversion()" style="margin-right: 0.5rem;">
                                üîÑ Convert All
                            </button>
                            <button class="btn btn-secondary" onclick="exportBatchResults()" id="exportBatchBtn" style="display: none;">
                                üíæ Export Results
                            </button>
                            <button class="btn btn-secondary" onclick="clearBatchData()">
                                üóë Clear
                            </button>
                        </div>
                        
                        <div id="batchResults" style="margin-top: 1rem; display: none;">
                            <h4>Results:</h4>
                            <div id="batchResultsContent" style="background: #f8f9fa; padding: 1rem; border-radius: 4px; max-height: 200px; overflow-y: auto;"></div>
                        </div>
                    </div>
                `;
                batchCard.style.opacity = '1';
            } else {
                // Show upgrade prompt
                batchCard.innerHTML = `
                    <span class="feature-icon">üìä</span>
                    <h3>Batch Converter <span style="background: var(--primary-color); color: white; padding: 0.2rem 0.5rem; border-radius: 0.25rem; font-size: 0.7rem;">PRO</span></h3>
                    <p>Convert multiple values at once with CSV import/export</p>
                    <button class="btn btn-primary" style="margin-top: 1rem;" onclick="showPaymentModal()">Upgrade to Access</button>
                `;
                batchCard.style.opacity = '0.7';
            }
        }
        
        // Batch conversion functionality
        let batchResults = [];
        
        function handleBatchFile(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const content = e.target.result;
                const values = content.split(/[,\n\r]+/).map(v => v.trim()).filter(v => v && !isNaN(v));
                document.getElementById('batchInput').value = values.join(', ');
            };
            reader.readAsText(file);
        }
        
        function processBatchConversion() {
            const input = document.getElementById('batchInput').value;
            const fromUnit = document.getElementById('batchFromUnit').value;
            const toUnit = document.getElementById('batchToUnit').value;
            
            if (!input.trim()) {
                alert('Please enter values to convert or upload a CSV file.');
                return;
            }
            
            // Parse input values
            const values = input.split(/[,\n\r]+/).map(v => v.trim()).filter(v => v && !isNaN(v)).map(v => parseFloat(v));
            
            if (values.length === 0) {
                alert('No valid numbers found. Please check your input.');
                return;
            }
            
            // Convert all values
            batchResults = [];
            values.forEach((value, index) => {
                const converted = convertUnit(value, fromUnit, toUnit);
                batchResults.push({
                    index: index + 1,
                    original: value,
                    converted: converted,
                    fromUnit: fromUnit,
                    toUnit: toUnit
                });
            });
            
            displayBatchResults();
        }
        
        function convertUnit(value, from, to) {
            // Simplified conversion logic - using length units as example
            const conversions = {
                meters: { feet: 3.28084, inches: 39.3701, kilometers: 0.001, miles: 0.000621371, meters: 1 },
                feet: { meters: 0.3048, inches: 12, kilometers: 0.0003048, miles: 0.000189394, feet: 1 },
                inches: { meters: 0.0254, feet: 0.0833333, kilometers: 0.0000254, miles: 0.0000157828, inches: 1 },
                kilometers: { meters: 1000, feet: 3280.84, inches: 39370.1, miles: 0.621371, kilometers: 1 },
                miles: { meters: 1609.34, feet: 5280, inches: 63360, kilometers: 1.60934, miles: 1 }
            };
            
            if (conversions[from] && conversions[from][to]) {
                return value * conversions[from][to];
            }
            return value; // fallback
        }
        
        function displayBatchResults() {
            const resultsDiv = document.getElementById('batchResults');
            const contentDiv = document.getElementById('batchResultsContent');
            
            if (!resultsDiv || !contentDiv) return;
            
            let html = '<table style="width: 100%; border-collapse: collapse;">';
            html += '<tr style="background: #e5e7eb; font-weight: bold;"><th style="padding: 0.5rem; border: 1px solid #d1d5db;">#</th><th style="padding: 0.5rem; border: 1px solid #d1d5db;">Original</th><th style="padding: 0.5rem; border: 1px solid #d1d5db;">Converted</th></tr>';
            
            batchResults.forEach(result => {
                html += `<tr>
                    <td style="padding: 0.5rem; border: 1px solid #d1d5db; text-align: center;">${result.index}</td>
                    <td style="padding: 0.5rem; border: 1px solid #d1d5db;">${result.original} ${result.fromUnit}</td>
                    <td style="padding: 0.5rem; border: 1px solid #d1d5db;"><strong>${result.converted.toFixed(6)} ${result.toUnit}</strong></td>
                </tr>`;
            });
            
            html += '</table>';
            html += `<p style="margin-top: 1rem; font-size: 0.9rem; color: #6b7280;">Converted ${batchResults.length} values from ${batchResults[0]?.fromUnit} to ${batchResults[0]?.toUnit}</p>`;
            
            contentDiv.innerHTML = html;
            resultsDiv.style.display = 'block';
            
            // Show export button
            const exportBtn = document.getElementById('exportBatchBtn');
            if (exportBtn) exportBtn.style.display = 'inline-block';
        }
        
        function exportBatchResults() {
            if (batchResults.length === 0) {
                alert('No results to export. Please run a conversion first.');
                return;
            }
            
            let csv = 'Index,Original Value,Original Unit,Converted Value,Converted Unit\\n';
            batchResults.forEach(result => {
                csv += `${result.index},${result.original},${result.fromUnit},${result.converted},${result.toUnit}\\n`;
            });
            
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `batch_conversion_results_${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }
        
        function clearBatchData() {
            document.getElementById('batchInput').value = '';
            document.getElementById('batchResults').style.display = 'none';
            document.getElementById('exportBatchBtn').style.display = 'none';
            batchResults = [];
            
            // Reset file input
            const fileInput = document.getElementById('batchFile');
            if (fileInput) fileInput.value = '';
        }

        // DOM elements
        const elements = {
            themeSelect: document.getElementById('themeSelect'),
            helpBtn: document.getElementById('helpBtn'),
            categories: document.getElementById('categories'),
            fromUnit: document.getElementById('fromUnit'),
            toUnit: document.getElementById('toUnit'),
            inputValue: document.getElementById('inputValue'),
            resultValue: document.getElementById('resultValue'),
            resultUnit: document.getElementById('resultUnit'),
            swapBtn: document.getElementById('swapBtn'),
            copyResult: document.getElementById('copyResult'),
            favoriteBtn: document.getElementById('favoriteBtn'),
            exportBtn: document.getElementById('exportBtn'),
            precision: document.getElementById('precision'),
            scientificNotation: document.getElementById('scientificNotation'),
            showFormula: document.getElementById('showFormula'),
            formulaDisplay: document.getElementById('formulaDisplay'),
            formulaText: document.getElementById('formulaText'),
            historyList: document.getElementById('historyList'),
            clearHistory: document.getElementById('clearHistory'),
            favoritesList: document.getElementById('favoritesList'),
            keyboardModal: document.getElementById('keyboardModal'),
            emailModal: document.getElementById('emailModal')
        };

        // Initialize application
        function init() {
            setTheme(currentTheme);
            populateUnits();
            updateHistory();
            updateFavorites();
            setupEventListeners();
            initializeStripe(); // Initialize Stripe integration
            updateThemeOptions(); // Initialize theme options based on premium status
            updatePremiumIndicators(); // Initialize premium indicators
            checkSubscriptionStatus();
            checkPremiumActivation(); // Check for premium activation methods
            
            // Update UI if user is already premium
            if (isPremiumUser) {
                updateUIForPremiumUser();
            } else {
                // Still need to update batch converter for non-premium users
                updateBatchConverter();
            }
            
            // Handle payment success/cancel from Stripe redirect
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('success') === 'true') {
                // Payment successful
                const sessionId = urlParams.get('session_id');
                console.log('Payment successful! Session ID:', sessionId);
                
                // Mark user as premium using the activation function
                activatePremiumMode('Stripe checkout success');
                localStorage.setItem('session_id', sessionId);
                
                // Show success modal
                const successModal = document.getElementById('successModal');
                if (successModal) {
                    successModal.style.display = 'block';
                }
                
                // Clean URL
                window.history.replaceState({}, document.title, window.location.pathname);
                
                // Track success
                if (typeof analytics !== 'undefined') {
                    analytics.track('payment_success', { session_id: sessionId });
                }
            } else if (urlParams.get('canceled') === 'true') {
                // Payment canceled
                console.log('Payment canceled');
                showNotification('Payment canceled. You can upgrade anytime!', 'info');
                
                // Clean URL
                window.history.replaceState({}, document.title, window.location.pathname);
                
                // Track cancellation
                if (typeof analytics !== 'undefined') {
                    analytics.track('payment_canceled');
                }
            }
            
            // Show upgrade prompts based on usage
            if (!isPremiumUser) {
                if (conversionCount >= 5) {
                    setTimeout(() => showEmailModal(), 3000);
                } else if (conversionCount >= 10) {
                    setTimeout(() => {
                        if (stripe) {
                            createCheckoutSession();
                        } else {
                            window.location.href = 'https://buy.stripe.com/00waEZ6NW6o44nsdNV7Vm02';
                        }
                    }, 5000);
                }
            }
        }
        
        
        /* 
        PRODUCTION SECURITY REQUIREMENTS:
        
        For full production deployment, you MUST implement server-side endpoints:
        
        1. CREATE CHECKOUT SESSION ENDPOINT:
           POST /api/create-checkout-session
           - Use SECRET KEY server-side: sk_live_51RyJPcPQdMywmVkH...
           - Validate request and create session with proper metadata
           - Return session ID to client for redirect
        
        2. WEBHOOK ENDPOINT:
           POST /api/stripe-webhook
           - Handle subscription.created, subscription.updated, subscription.deleted
           - Update user subscription status in your database
           - Verify webhook signature for security
        
        3. SUBSCRIPTION STATUS ENDPOINT:
           GET /api/subscription-status
           - Verify user's current subscription status
           - Return subscription details and trial information
        
        4. ENVIRONMENT VARIABLES:
           - STRIPE_SECRET_KEY=sk_live_51RyJPcPQdMywmVkH...
           - STRIPE_WEBHOOK_SECRET=whsec_...
           - Never expose secret keys in client-side code
        
        Current implementation uses client-side checkout for demo purposes.
        Replace with secure server-side session creation for production.
        */
        
        // Subscription status check
        function checkSubscriptionStatus() {
            if (trialEndDate) {
                const now = new Date();
                const endDate = new Date(trialEndDate);
                
                if (now > endDate && !isPremiumUser) {
                    // Trial expired
                    localStorage.removeItem('trialEndDate');
                    subscriptionStatus = 'expired';
                    localStorage.setItem('subscriptionStatus', 'expired');
                    showTrialExpiredModal();
                }
            }
        }

        // Theme management
        function setTheme(theme) {
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
            currentTheme = theme;
            
            // Update theme selector
            if (elements.themeSelect) {
                elements.themeSelect.value = theme;
            }
        }

        function changeTheme(theme) {
            setTheme(theme);
            
            // Analytics tracking
            if (typeof gtag !== 'undefined') {
                gtag('event', 'theme_change', {
                    'theme': theme
                });
            }
        }

        function updateThemeOptions() {
            const premiumThemes = document.querySelectorAll('.premium-theme');
            premiumThemes.forEach(option => {
                if (isPremiumUser) {
                    option.disabled = false;
                    option.textContent = option.textContent.replace(' (PREMIUM)', '');
                } else {
                    option.disabled = true;
                    if (!option.textContent.includes('(PREMIUM)')) {
                        option.textContent += ' (PREMIUM)';
                    }
                }
            });
        }

        // Custom Units Management
        function getCustomUnits() {
            const customUnits = localStorage.getItem('customUnits');
            return customUnits ? JSON.parse(customUnits) : {};
        }

        function saveCustomUnit(category, unitKey, unitData) {
            const customUnits = getCustomUnits();
            if (!customUnits[category]) {
                customUnits[category] = {};
            }
            customUnits[category][unitKey] = unitData;
            localStorage.setItem('customUnits', JSON.stringify(customUnits));
        }

        function showCustomUnitModal() {
            if (!isPremiumUser) {
                alert('üîí Custom Units Creator is a premium feature.\n\nUpgrade to Pro to create your own custom units with personalized conversion ratios!');
                return;
            }
            
            const modal = document.getElementById('customUnitModal');
            modal.style.display = 'block';
            
            // Pre-populate category
            document.getElementById('customUnitCategory').value = currentCategory;
        }

        function createCustomUnit() {
            const name = document.getElementById('customUnitName').value.trim();
            const symbol = document.getElementById('customUnitSymbol').value.trim();
            const ratio = parseFloat(document.getElementById('customUnitRatio').value);
            const category = document.getElementById('customUnitCategory').value;
            
            if (!name || !symbol || !ratio || ratio <= 0) {
                alert('Please fill in all fields with valid values.');
                return;
            }
            
            // Create unit key
            const unitKey = `custom_${Date.now()}`;
            
            // Save custom unit
            saveCustomUnit(category, unitKey, {
                name: name,
                symbol: symbol,
                value: ratio,
                custom: true
            });
            
            // Close modal and refresh units
            document.getElementById('customUnitModal').style.display = 'none';
            populateUnits();
            
            // Clear form
            document.getElementById('customUnitName').value = '';
            document.getElementById('customUnitSymbol').value = '';
            document.getElementById('customUnitRatio').value = '';
            
            showNotification(`‚úÖ Custom unit "${name}" created successfully!`);
        }

        // Unit population
        function populateUnits() {
            const categoryUnits = units[currentCategory];
            const customUnits = getCustomUnits()[currentCategory] || {};
            const allUnits = { ...categoryUnits, ...customUnits };
            
            const fromSelect = elements.fromUnit;
            const toSelect = elements.toUnit;
            
            // Clear existing options
            fromSelect.innerHTML = '';
            toSelect.innerHTML = '';
            
            // Add standard units
            Object.keys(categoryUnits).forEach((key, index) => {
                const unit = categoryUnits[key];
                const option1 = new Option(`${unit.name} (${unit.symbol})`, key);
                const option2 = new Option(`${unit.name} (${unit.symbol})`, key);
                
                fromSelect.add(option1);
                toSelect.add(option2);
                
                // Set default selections
                if (index === 0) fromSelect.value = key;
                if (index === 1) toSelect.value = key;
            });
            
            // Add custom units if they exist
            Object.keys(customUnits).forEach(key => {
                const unit = customUnits[key];
                const option1 = new Option(`${unit.name} (${unit.symbol}) [Custom]`, key);
                const option2 = new Option(`${unit.name} (${unit.symbol}) [Custom]`, key);
                
                fromSelect.add(option1);
                toSelect.add(option2);
            });
            
            // Add "Add Custom Unit" option for premium users
            if (isPremiumUser) {
                const divider1 = new Option('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', '', true, false);
                const divider2 = new Option('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', '', true, false);
                const addOption1 = new Option('üîß ‚ûï CREATE CUSTOM UNIT', 'add_custom');
                const addOption2 = new Option('üîß ‚ûï CREATE CUSTOM UNIT', 'add_custom');
                
                divider1.disabled = true;
                divider2.disabled = true;
                addOption1.style.fontWeight = 'bold';
                addOption1.style.color = '#22c55e';
                addOption2.style.fontWeight = 'bold';
                addOption2.style.color = '#22c55e';
                
                fromSelect.add(divider1);
                fromSelect.add(addOption1);
                
                toSelect.add(divider2);
                toSelect.add(addOption2);
            }
            
            convert();
        }

        // Conversion logic with freemium restrictions
        function convert() {
            const value = parseFloat(elements.inputValue.value) || 0;
            const fromUnit = elements.fromUnit.value;
            const toUnit = elements.toUnit.value;
            let precision = parseInt(elements.precision.value);
            const useScientific = elements.scientificNotation.checked;
            
            if (!fromUnit || !toUnit) return;
            
            // Check if user selected "Add Custom Unit"
            if (fromUnit === 'add_custom' || toUnit === 'add_custom') {
                showCustomUnitModal();
                // Reset to first valid option
                elements.fromUnit.selectedIndex = 0;
                elements.toUnit.selectedIndex = 1;
                return;
            }
            
            // Enforce freemium restrictions
            if (!isPremiumUser && precision > 2) {
                precision = 2;
                elements.precision.value = '2';
                
                // Show upgrade prompt occasionally
                const precisionAttempts = parseInt(localStorage.getItem('precisionAttempts') || '0') + 1;
                localStorage.setItem('precisionAttempts', precisionAttempts.toString());
                
                if (precisionAttempts >= 3) {
                    setTimeout(() => {
                        if (stripe) {
                            createCheckoutSession();
                        } else {
                            window.location.href = 'https://buy.stripe.com/00waEZ6NW6o44nsdNV7Vm02';
                        }
                    }, 1000);
                }
            }
            
            let result;
            let formula = '';
            
            // Get units from standard and custom units
            const standardUnits = units[currentCategory] || {};
            const customUnits = getCustomUnits()[currentCategory] || {};
            const allUnits = { ...standardUnits, ...customUnits };
            
            if (currentCategory === 'temperature') {
                result = convertTemperature(value, fromUnit, toUnit);
                formula = getTemperatureFormula(fromUnit, toUnit);
            } else {
                const fromFactor = allUnits[fromUnit]?.factor || allUnits[fromUnit]?.value || 1;
                const toFactor = allUnits[toUnit]?.factor || allUnits[toUnit]?.value || 1;
                result = (value * fromFactor) / toFactor;
                formula = `${value} √ó ${fromFactor} √∑ ${toFactor} = ${result}`;
            }
            
            // Format result
            let formattedResult;
            if (useScientific && result !== 0) {
                // Use scientific notation for all non-zero values when enabled
                formattedResult = result.toExponential(precision);
            } else if (!useScientific && (Math.abs(result) >= 1e9 || (Math.abs(result) < 1e-6 && result !== 0))) {
                // Auto-apply scientific notation for extremely large/small numbers even when disabled
                formattedResult = result.toExponential(precision);
            } else {
                formattedResult = result.toFixed(precision);
            }
            
            // Update display
            elements.resultValue.textContent = formattedResult;
            elements.resultUnit.textContent = allUnits[toUnit]?.symbol || '';
            elements.formulaText.textContent = formula;
            
            // Add to history
            if (value !== 0) {
                addToHistory(value, fromUnit, result, toUnit);
                conversionCount++;
                localStorage.setItem('conversionCount', conversionCount.toString());
            }
            
            // Analytics tracking
            if (typeof gtag !== 'undefined') {
                gtag('event', 'conversion', {
                    'category': currentCategory,
                    'from_unit': fromUnit,
                    'to_unit': toUnit,
                    'value': value
                });
            }
        }

        // Temperature conversion
        function convertTemperature(value, from, to) {
            let celsius;
            
            // Convert to Celsius first
            switch (from) {
                case 'celsius':
                    celsius = value;
                    break;
                case 'fahrenheit':
                    celsius = (value - 32) * 5/9;
                    break;
                case 'kelvin':
                    celsius = value - 273.15;
                    break;
            }
            
            // Convert from Celsius to target
            switch (to) {
                case 'celsius':
                    return celsius;
                case 'fahrenheit':
                    return celsius * 9/5 + 32;
                case 'kelvin':
                    return celsius + 273.15;
            }
        }

        function getTemperatureFormula(from, to) {
            const formulas = {
                'celsius-fahrenheit': '¬∞C √ó 9/5 + 32',
                'fahrenheit-celsius': '(¬∞F - 32) √ó 5/9',
                'celsius-kelvin': '¬∞C + 273.15',
                'kelvin-celsius': 'K - 273.15',
                'fahrenheit-kelvin': '(¬∞F - 32) √ó 5/9 + 273.15',
                'kelvin-fahrenheit': '(K - 273.15) √ó 9/5 + 32'
            };
            
            return formulas[`${from}-${to}`] || 'Direct conversion';
        }

        // History management
        function addToHistory(fromValue, fromUnit, toValue, toUnit) {
            const conversion = {
                id: Date.now(),
                timestamp: new Date().toLocaleString(),
                from: `${fromValue} ${units[currentCategory][fromUnit].symbol}`,
                to: `${toValue.toFixed(4)} ${units[currentCategory][toUnit].symbol}`,
                category: currentCategory
            };
            
            conversionHistory.unshift(conversion);
            conversionHistory = conversionHistory.slice(0, 10); // Keep only last 10
            localStorage.setItem('conversionHistory', JSON.stringify(conversionHistory));
            updateHistory();
        }

        function updateHistory() {
            const historyContainer = elements.historyList;
            
            if (conversionHistory.length === 0) {
                historyContainer.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">No conversions yet</p>';
                return;
            }
            
            historyContainer.innerHTML = conversionHistory.map(item => `
                <div class="history-item">
                    <div>
                        <div style="font-weight: 600;">${item.from} ‚Üí ${item.to}</div>
                        <div style="font-size: 0.8rem; color: var(--text-secondary);">${item.timestamp}</div>
                    </div>
                    <button class="btn" onclick="copyToClipboard('${item.to}')">Copy</button>
                </div>
            `).join('');
        }

        function clearHistory() {
            conversionHistory = [];
            localStorage.removeItem('conversionHistory');
            updateHistory();
        }

        // Favorites management
        function toggleFavorite() {
            const fromUnit = elements.fromUnit.value;
            const toUnit = elements.toUnit.value;
            const favoriteKey = `${currentCategory}-${fromUnit}-${toUnit}`;
            
            const existingIndex = favorites.findIndex(f => f.key === favoriteKey);
            
            if (existingIndex >= 0) {
                favorites.splice(existingIndex, 1);
                elements.favoriteBtn.innerHTML = '‚≠ê Favorite';
            } else {
                favorites.push({
                    key: favoriteKey,
                    name: `${units[currentCategory][fromUnit].symbol} ‚Üí ${units[currentCategory][toUnit].symbol}`,
                    category: currentCategory,
                    fromUnit,
                    toUnit
                });
                elements.favoriteBtn.innerHTML = '‚òÖ Favorited';
            }
            
            localStorage.setItem('favorites', JSON.stringify(favorites));
            updateFavorites();
        }

        function updateFavorites() {
            const favoritesContainer = elements.favoritesList;
            
            if (favorites.length === 0) {
                favoritesContainer.innerHTML = '<p style="text-align: center; color: var(--text-secondary); margin-top: 1rem;">No favorites yet</p>';
                return;
            }
            
            favoritesContainer.innerHTML = favorites.map(fav => `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.5rem; margin-bottom: 0.5rem; background-color: var(--background-color); border-radius: 0.25rem; border: 1px solid var(--border-color);">
                    <span>${fav.name}</span>
                    <button class="btn" onclick="loadFavorite('${fav.key}')">Use</button>
                </div>
            `).join('');
        }

        function loadFavorite(key) {
            const favorite = favorites.find(f => f.key === key);
            if (favorite) {
                // Switch category if needed
                if (favorite.category !== currentCategory) {
                    document.querySelector(`[data-category="${favorite.category}"]`).click();
                }
                
                setTimeout(() => {
                    elements.fromUnit.value = favorite.fromUnit;
                    elements.toUnit.value = favorite.toUnit;
                    convert();
                }, 100);
            }
        }

        // Utility functions
        function swapUnits() {
            const fromValue = elements.fromUnit.value;
            const toValue = elements.toUnit.value;
            
            elements.fromUnit.value = toValue;
            elements.toUnit.value = fromValue;
            
            // Animate the swap button
            elements.swapBtn.style.transform = 'rotate(180deg)';
            setTimeout(() => {
                elements.swapBtn.style.transform = 'rotate(0deg)';
            }, 200);
            
            convert();
        }

        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
                showNotification('Copied to clipboard!');
            } catch (err) {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                showNotification('Copied to clipboard!');
            }
        }

        function showNotification(message) {
            const notification = document.createElement('div');
            notification.textContent = message;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background-color: var(--primary-color);
                color: white;
                padding: 1rem;
                border-radius: 0.5rem;
                z-index: 1001;
                animation: fadeIn 0.3s ease-out;
            `;
            
            document.body.appendChild(notification);
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        function showExportModal() {
            const modal = document.getElementById('exportModal');
            modal.style.display = 'block';
        }

        function exportResults(format = 'csv') {
            const data = {
                currentConversion: {
                    input: elements.inputValue.value,
                    fromUnit: elements.fromUnit.value,
                    result: elements.resultValue.textContent,
                    toUnit: elements.toUnit.value,
                    category: currentCategory
                },
                history: conversionHistory,
                favorites: favorites
            };
            
            let content, mimeType, filename;
            
            switch(format) {
                case 'csv':
                    content = generateCSVExport(data);
                    mimeType = 'text/csv';
                    filename = 'precision-convert-data.csv';
                    break;
                case 'pdf':
                    generatePDFExport(data);
                    return; // PDF export handles download internally
                case 'txt':
                    content = generateTextExport(data);
                    mimeType = 'text/plain';
                    filename = 'precision-convert-data.txt';
                    break;
                default:
                    content = generateCSVExport(data);
                    mimeType = 'text/csv';
                    filename = 'precision-convert-data.csv';
            }
            
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            URL.revokeObjectURL(url);
            
            // Close export modal
            hideModal(document.getElementById('exportModal'));
            showNotification(`‚úÖ Export completed as ${format.toUpperCase()}!`);
        }

        function generateCSVExport(data) {
            let csv = 'Export Type,Category,Input Value,Input Unit,Output Value,Output Unit,Timestamp\n';
            
            // Add current conversion
            if (data.currentConversion.input) {
                csv += `Current,${data.currentConversion.category},${data.currentConversion.input},${data.currentConversion.fromUnit},${data.currentConversion.result},${data.currentConversion.toUnit},${new Date().toISOString()}\n`;
            }
            
            // Add history
            data.history.forEach(item => {
                csv += `History,${item.category || 'Unknown'},${item.fromValue},${item.fromUnit},${item.toValue},${item.toUnit},${item.timestamp || new Date().toISOString()}\n`;
            });
            
            // Add favorites
            data.favorites.forEach(fav => {
                csv += `Favorite,${fav.category || 'Unknown'},${fav.from},${fav.to},,,"${fav.timestamp || new Date().toISOString()}"\n`;
            });
            
            return csv;
        }

        function generateTextExport(data) {
            let text = '='.repeat(60) + '\n';
            text += '           PRECISIONCONVERT.IO EXPORT REPORT\n';
            text += '='.repeat(60) + '\n\n';
            text += `Generated: ${new Date().toLocaleString()}\n\n`;
            
            // Current conversion
            if (data.currentConversion.input) {
                text += 'CURRENT CONVERSION:\n';
                text += '-'.repeat(30) + '\n';
                text += `Category: ${data.currentConversion.category.toUpperCase()}\n`;
                text += `Input: ${data.currentConversion.input} ${data.currentConversion.fromUnit}\n`;
                text += `Output: ${data.currentConversion.result} ${data.currentConversion.toUnit}\n\n`;
            }
            
            // Conversion history
            if (data.history.length > 0) {
                text += 'CONVERSION HISTORY:\n';
                text += '-'.repeat(30) + '\n';
                data.history.forEach((item, index) => {
                    text += `${index + 1}. ${item.fromValue} ${item.fromUnit} ‚Üí ${item.toValue} ${item.toUnit}\n`;
                });
                text += '\n';
            }
            
            // Favorites
            if (data.favorites.length > 0) {
                text += 'FAVORITE CONVERSIONS:\n';
                text += '-'.repeat(30) + '\n';
                data.favorites.forEach((fav, index) => {
                    text += `${index + 1}. ${fav.from} ‚Üî ${fav.to}\n`;
                });
                text += '\n';
            }
            
            text += '='.repeat(60) + '\n';
            text += 'Report generated by PrecisionConvert.io\n';
            text += 'Professional unit conversion tool\n';
            text += '='.repeat(60);
            
            return text;
        }

        function generatePDFExport(data) {
            // Simple PDF generation using jsPDF (if available) or browser print
            const printWindow = window.open('', '_blank');
            
            const htmlContent = `
                <!DOCTYPE html>
                <html>
                <head>
                    <title>PrecisionConvert.io Export</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 40px; }
                        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
                        .section { margin-bottom: 25px; }
                        .section h3 { color: #2563eb; border-bottom: 1px solid #ccc; padding-bottom: 5px; }
                        table { width: 100%; border-collapse: collapse; margin-top: 10px; }
                        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                        th { background-color: #f8f9fa; }
                        .footer { margin-top: 40px; text-align: center; font-size: 12px; color: #666; }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>PrecisionConvert.io Export Report</h1>
                        <p>Generated on ${new Date().toLocaleString()}</p>
                    </div>
                    
                    ${data.currentConversion.input ? `
                    <div class="section">
                        <h3>Current Conversion</h3>
                        <table>
                            <tr><th>Category</th><td>${data.currentConversion.category.toUpperCase()}</td></tr>
                            <tr><th>Input</th><td>${data.currentConversion.input} ${data.currentConversion.fromUnit}</td></tr>
                            <tr><th>Output</th><td>${data.currentConversion.result} ${data.currentConversion.toUnit}</td></tr>
                        </table>
                    </div>
                    ` : ''}
                    
                    ${data.history.length > 0 ? `
                    <div class="section">
                        <h3>Conversion History</h3>
                        <table>
                            <tr><th>#</th><th>From</th><th>To</th><th>Result</th></tr>
                            ${data.history.map((item, index) => `
                                <tr>
                                    <td>${index + 1}</td>
                                    <td>${item.fromValue} ${item.fromUnit}</td>
                                    <td>${item.toValue} ${item.toUnit}</td>
                                    <td>${item.toValue} ${item.toUnit}</td>
                                </tr>
                            `).join('')}
                        </table>
                    </div>
                    ` : ''}
                    
                    ${data.favorites.length > 0 ? `
                    <div class="section">
                        <h3>Favorite Conversions</h3>
                        <table>
                            <tr><th>#</th><th>Conversion Pair</th></tr>
                            ${data.favorites.map((fav, index) => `
                                <tr>
                                    <td>${index + 1}</td>
                                    <td>${fav.from} ‚Üî ${fav.to}</td>
                                </tr>
                            `).join('')}
                        </table>
                    </div>
                    ` : ''}
                    
                    <div class="footer">
                        <p>Report generated by PrecisionConvert.io - Professional Unit Conversion Tool</p>
                    </div>
                </body>
                </html>
            `;
            
            printWindow.document.write(htmlContent);
            printWindow.document.close();
            
            // Auto-print after load
            printWindow.onload = function() {
                printWindow.print();
            };
        }

        function showEmailModal() {
            elements.emailModal.style.display = 'block';
        }

        function showModal(modal) {
            if (modal) {
                modal.style.display = 'block';
            }
        }
        
        function hideModal(modal) {
            modal.style.display = 'none';
        }
        
        // Navigation functions
        function scrollToConverter() {
            document.querySelector('.converter-section').scrollIntoView({ 
                behavior: 'smooth',
                block: 'start'
            });
            analytics.track('navigation_clicked', { destination: 'converter' });
        }
        
        function scrollToSection(sectionId) {
            const section = document.getElementById(sectionId);
            if (section) {
                section.scrollIntoView({ 
                    behavior: 'smooth',
                    block: 'start'
                });
                analytics.track('navigation_clicked', { destination: sectionId });
            }
        }
        
        // Legal modal functions
        function showPrivacyModal() {
            document.getElementById('privacyModal').style.display = 'block';
            analytics.track('legal_page_viewed', { page: 'privacy' });
        }
        
        function showTermsModal() {
            document.getElementById('termsModal').style.display = 'block';
            analytics.track('legal_page_viewed', { page: 'terms' });
        }
        
        function showCookieModal() {
            document.getElementById('cookieModal').style.display = 'block';
            analytics.track('legal_page_viewed', { page: 'cookies' });
        }
        
        function showAboutModal() {
            document.getElementById('aboutModal').style.display = 'block';
            analytics.track('about_page_viewed');
        }
        
        function showContactModal() {
            document.getElementById('contactModal').style.display = 'block';
            analytics.track('contact_page_viewed');
        }
        
        function showFAQModal() {
            document.getElementById('faqModal').style.display = 'block';
            analytics.track('faq_page_viewed');
        }
        
        function showFAQ() {
            document.getElementById('faqModal').style.display = 'block';
            analytics.track('faq_page_viewed');
        }
        
        function showAbout() {
            showAboutModal();
        }
        
        function showContact() {
            showContactModal();
        }
        
        function toggleFAQ(button) {
            const answer = button.nextElementSibling;
            const isActive = answer.classList.contains('active');
            
            // Close all FAQ answers
            document.querySelectorAll('.faq-answer').forEach(ans => ans.classList.remove('active'));
            document.querySelectorAll('.faq-question').forEach(q => q.classList.remove('active'));
            
            // Toggle current answer
            if (!isActive) {
                answer.classList.add('active');
                button.classList.add('active');
            }
        }
        
        function handleContactForm(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            
            // Show loading state
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = 'Sending...';
            submitBtn.disabled = true;
            
            // Submit to Netlify
            fetch('/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams(formData).toString()
            })
            .then(() => {
                showNotification('Message sent successfully!');
                form.reset();
            })
            .catch(() => {
                showNotification('Error sending message. Please try again.');
            })
            .finally(() => {
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            });
        }
        
        function dismissInstallPrompt() {
            document.getElementById('installPrompt').classList.remove('show');
            analytics.track('install_prompt_dismissed');
        }
        
        // Initialize Stripe
        let stripe;
        
        // Initialize Stripe with publishable key from environment
        function initializeStripe() {
            // Environment-based key selection
            let publishableKey;
            
            // For local development, use test keys
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                publishableKey = 'pk_test_51RyJPcPQdMywmVkHaOfoOFZLAhcWELjKC4Sq8Jl9cJQ2qY0Vkz1dGUNjqBcXzMWqQZEf2ZlPhEJTN8P9TzwzQHNb00G9IHjYPs';
                console.log('Using Stripe test mode for local development');
            } else {
                // Production key - this placeholder will be replaced by Netlify build process
                publishableKey = 'NETLIFY_STRIPE_PUBLISHABLE_KEY_PLACEHOLDER';
                
                // Validate the key was properly injected
                if (publishableKey.includes('PLACEHOLDER')) {
                    console.error('Stripe publishable key not properly configured in Netlify environment');
                    // Fallback to test key for now (should be replaced with proper live key)
                    publishableKey = 'pk_test_51RyJPcPQdMywmVkHaOfoOFZLAhcWELjKC4Sq8Jl9cJQ2qY0Vkz1dGUNjqBcXzMWqQZEf2ZlPhEJTN8P9TzwzQHNb00G9IHjYPs';
                }
            }
            
            try {
                stripe = Stripe(publishableKey);
                console.log('Stripe initialized successfully');
            } catch (error) {
                console.error('Failed to initialize Stripe:', error);
                stripe = null; // This will trigger fallback to direct payment links
            }
        }
        
        // Create checkout session via Netlify function
        async function createCheckoutSession() {
            try {
                showPaymentLoading();
                
                const response = await fetch('/.netlify/functions/create-checkout-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        priceId: 'price_1RyJuRPQdMywmVkH8Afo8raI',
                        successUrl: `${window.location.origin}?success=true&session_id={CHECKOUT_SESSION_ID}`,
                        cancelUrl: `${window.location.origin}?canceled=true`
                    })
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(`Server error: ${errorData.error || response.statusText}`);
                }
                
                const { sessionId } = await response.json();
                
                if (!sessionId) {
                    throw new Error('No session ID received from server');
                }
                
                const { error } = await stripe.redirectToCheckout({ sessionId });
                
                if (error) {
                    console.error('Stripe redirect error:', error);
                    throw new Error(`Payment processing error: ${error.message}`);
                }
            } catch (error) {
                console.error('Payment error:', error);
                hidePaymentLoading();
                showPaymentError(error.message);
                
                // Track error for analytics
                analytics.track('payment_error', { 
                    error: error.message,
                    timestamp: Date.now()
                });
            }
        }
        
        // Show payment error with user-friendly message and retry option
        function showPaymentError(errorMessage) {
            const userMessage = errorMessage.includes('Network') || errorMessage.includes('fetch') 
                ? 'Connection issue detected. Please check your internet connection and try again.'
                : 'Payment processing temporarily unavailable. Please try again or use our direct payment link.';
            
            const shouldRetry = confirm(`${userMessage}\n\nWould you like to try again?`);
            
            if (shouldRetry) {
                // Retry with a small delay
                setTimeout(() => createCheckoutSession(), 1000);
            } else {
                // Fallback to direct Stripe payment link
                analytics.track('payment_fallback_used', { error: errorMessage });
                const proceedWithFallback = confirm('Would you like to proceed with our secure payment page instead?');
                
                if (proceedWithFallback) {
                    window.location.href = 'https://buy.stripe.com/00waEZ6NW6o44nsdNV7Vm02';
                }
            }
        }
        
        // Show loading state during payment process
        function showPaymentLoading() {
            const upgradeButtons = document.querySelectorAll('[onclick*="buy.stripe.com"], .btn[onclick*="showPaymentModal"], .btn[onclick*="processPayment"]');
            upgradeButtons.forEach(btn => {
                btn.disabled = true;
                btn.style.opacity = '0.6';
                btn.innerHTML = btn.innerHTML.replace(/üëë|üöÄ|üîì/, '‚è≥') + ' Processing...';
            });
        }
        
        // Hide loading state
        function hidePaymentLoading() {
            const upgradeButtons = document.querySelectorAll('.btn');
            upgradeButtons.forEach(btn => {
                btn.disabled = false;
                btn.style.opacity = '1';
                btn.innerHTML = btn.innerHTML.replace(' Processing...', '').replace('‚è≥', 'üëë');
            });
        }

        // Payment processing functions
        function showPaymentModal() {
            analytics.track('payment_modal_shown');
            if (stripe) {
                createCheckoutSession();
            } else {
                // Fallback if Stripe not initialized
                window.location.href = 'https://buy.stripe.com/00waEZ6NW6o44nsdNV7Vm02';
            }
        }
        
        function showTrialExpiredModal() {
            alert('Your 7-day free trial has expired. Upgrade to Pro to continue using premium features.');
            if (stripe) {
                createCheckoutSession();
            } else {
                window.location.href = 'https://buy.stripe.com/00waEZ6NW6o44nsdNV7Vm02';
            }
        }
        
        function showUpgradeModal(message) {
            analytics.track('upgrade_prompt_shown', { message: message });
            if (stripe) {
                createCheckoutSession();
            } else {
                window.location.href = 'https://buy.stripe.com/00waEZ6NW6o44nsdNV7Vm02';
            }
        }
        
        function processPayment() {
            analytics.track('process_payment_called');
            if (stripe) {
                createCheckoutSession();
            } else {
                window.location.href = 'https://buy.stripe.com/00waEZ6NW6o44nsdNV7Vm02';
            }
        }
        
        function redirectToPayment() {
            analytics.track('redirect_to_payment_called');
            if (stripe) {
                createCheckoutSession();
            } else {
                window.location.href = 'https://buy.stripe.com/00waEZ6NW6o44nsdNV7Vm02';
            }
        }

        // Event listeners
        function setupEventListeners() {
            // Theme toggle
            elements.themeSelect.addEventListener('change', (e) => {
                const selectedTheme = e.target.value;
                const premiumThemes = ['scientific-blue', 'engineering-orange', 'minimalist-green'];
                
                // Check if it's a premium theme and user is not premium
                if (premiumThemes.includes(selectedTheme) && !isPremiumUser) {
                    e.target.value = currentTheme; // Reset to current theme
                    alert('üîí Premium themes are only available with a Pro subscription.\n\nUpgrade to unlock Scientific Blue, Engineering Orange, and Minimalist Green themes!');
                    return;
                }
                
                changeTheme(selectedTheme);
            });
            
            // Help button
            elements.helpBtn.addEventListener('click', () => {
                elements.keyboardModal.style.display = 'block';
            });
            
            // Category buttons
            elements.categories.addEventListener('click', (e) => {
                if (e.target.classList.contains('category-btn')) {
                    const category = e.target.dataset.category;
                    const isProfessionalCategory = e.target.classList.contains('professional-category');
                    
                    // Check if this is a professional category requiring premium
                    if (isProfessionalCategory && !isPremiumUser) {
                        showNotification('üîí Professional categories require Premium subscription');
                        showUpgradeModal();
                        return;
                    }
                    
                    // Update active category
                    document.querySelectorAll('.category-btn').forEach(btn => btn.classList.remove('active'));
                    e.target.classList.add('active');
                    
                    currentCategory = category;
                    populateUnits();
                    
                    // Track professional feature usage
                    if (isProfessionalCategory) {
                        analytics.track('professional_category_accessed', { category });
                    }
                }
            });
            
            // Input and select changes
            elements.inputValue.addEventListener('input', convert);
            elements.fromUnit.addEventListener('change', convert);
            elements.toUnit.addEventListener('change', convert);
            elements.precision.addEventListener('change', (e) => {
                const selectedPrecision = parseInt(e.target.value);
                
                // Check if user is trying to use premium precision
                if (!isPremiumUser && selectedPrecision > 2) {
                    showUpgradeModal('High precision calculations (>2 decimal places) are only available for Pro subscribers.');
                    e.target.value = '2';
                    return;
                }
                
                convert();
            });
            elements.scientificNotation.addEventListener('change', () => {
                // Visual feedback for scientific notation
                const label = elements.scientificNotation.parentElement;
                if (elements.scientificNotation.checked) {
                    label.style.background = 'rgba(34, 197, 94, 0.1)';
                    label.style.borderColor = '#22c55e';
                    label.style.border = '1px solid #22c55e';
                    label.style.borderRadius = '0.25rem';
                    label.style.padding = '0.25rem 0.5rem';
                } else {
                    label.style.background = '';
                    label.style.borderColor = '';
                    label.style.border = '';
                    label.style.borderRadius = '';
                    label.style.padding = '';
                }
                convert();
            });
            
            // Buttons
            elements.swapBtn.addEventListener('click', swapUnits);
            elements.copyResult.addEventListener('click', () => {
                copyToClipboard(elements.resultValue.textContent + ' ' + elements.resultUnit.textContent);
            });
            elements.favoriteBtn.addEventListener('click', toggleFavorite);
            elements.exportBtn.addEventListener('click', () => {
                if (!isPremiumUser) {
                    showUpgradeModal('Export functionality is a Pro feature.');
                    return;
                }
                showExportModal();
            });
            elements.showFormula.addEventListener('click', () => {
                const display = elements.formulaDisplay;
                display.style.display = display.style.display === 'none' ? 'block' : 'none';
            });
            elements.clearHistory.addEventListener('click', clearHistory);
            
            // Modal close buttons
            document.querySelectorAll('.close-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const modal = e.target.closest('.modal');
                    hideModal(modal);
                });
            });
            
            // Close modals when clicking outside
            document.querySelectorAll('.modal').forEach(modal => {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        hideModal(modal);
                    }
                });
            });
            
            // FAQ toggles
            document.querySelectorAll('.faq-question').forEach(btn => {
                btn.addEventListener('click', () => {
                    const answer = btn.nextElementSibling;
                    const isActive = answer.classList.contains('active');
                    
                    // Close all other FAQ items
                    document.querySelectorAll('.faq-answer').forEach(ans => ans.classList.remove('active'));
                    document.querySelectorAll('.faq-question span').forEach(span => span.textContent = '+');
                    
                    // Toggle current item
                    if (!isActive) {
                        answer.classList.add('active');
                        btn.querySelector('span').textContent = '-';
                    }
                });
            });
            
            // Keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                if (e.ctrlKey && e.shiftKey && e.key === 'S') {
                    e.preventDefault();
                    swapUnits();
                } else if (e.ctrlKey && e.key === 'h') {
                    e.preventDefault();
                    elements.historyList.scrollIntoView({ behavior: 'smooth' });
                } else if (e.ctrlKey && e.key === 'f') {
                    e.preventDefault();
                    toggleFavorite();
                } else if (e.key === '?' && !e.ctrlKey && !e.shiftKey && !e.altKey) {
                    elements.keyboardModal.style.display = 'block';
                } else if (e.key === 'Enter' && document.activeElement === elements.inputValue) {
                    copyToClipboard(elements.resultValue.textContent + ' ' + elements.resultUnit.textContent);
                }
            });
            
            // Add keyboard navigation class for better focus styles
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Tab') {
                    document.body.classList.add('keyboard-nav');
                }
            });
            
            document.addEventListener('mousedown', () => {
                document.body.classList.remove('keyboard-nav');
            });
            
            // Payment buttons use onclick handlers for direct redirects
            
            // PWA install prompt
            document.getElementById('installBtn')?.addEventListener('click', installPWA);
            document.getElementById('dismissInstall')?.addEventListener('click', dismissInstallPrompt);
            
            // Newsletter form submission
            document.querySelector('form[name="newsletter"]')?.addEventListener('submit', (e) => {
                analytics.track('newsletter_signup', { source: 'modal' });
            });
            
            // Contact form submission
            document.querySelector('form[name="contact"]')?.addEventListener('submit', (e) => {
                analytics.track('contact_form_submit');
            });
            
            // Check for payment success/cancel in URL
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('success') === 'true') {
                // Payment successful
                const sessionId = urlParams.get('session_id');
                
                isPremiumUser = true;
                localStorage.setItem('isPremium', 'true');
                subscriptionStatus = 'active';
                localStorage.setItem('subscriptionStatus', 'active');
                
                // Store session ID for potential verification
                if (sessionId) {
                    localStorage.setItem('stripeSessionId', sessionId);
                }
                
                // Set trial end date to 7 days from now
                const trialEnd = new Date();
                trialEnd.setDate(trialEnd.getDate() + 7);
                localStorage.setItem('trialEndDate', trialEnd.toISOString());
                
                analytics.track('payment_successful', {
                    session_id: sessionId,
                    subscription_type: 'trial',
                    price_id: 'price_1RyJuRPQdMywmVkH8Afo8raI'
                });
                
                // Show success modal
                setTimeout(() => {
                    document.getElementById('successModal').style.display = 'block';
                }, 1000);
                
                // Clean URL
                window.history.replaceState({}, document.title, window.location.pathname);
            } else if (urlParams.get('canceled') === 'true') {
                analytics.track('payment_canceled');
                // Clean URL
                window.history.replaceState({}, document.title, window.location.pathname);
            }
            
            // Voice input (if supported)
            if ('webkitSpeechRecognition' in window) {
                const recognition = new webkitSpeechRecognition();
                recognition.continuous = false;
                recognition.interimResults = false;
                recognition.lang = 'en-US';
                
                // Add voice input button (would need to be added to HTML)
                const voiceBtn = document.getElementById('voiceInputBtn');
                if (voiceBtn) {
                    voiceBtn.addEventListener('click', () => {
                        if (!isPremiumUser) {
                            showUpgradeModal('Voice input is a Pro feature.');
                            return;
                        }
                        
                        recognition.start();
                        analytics.track('voice_input_started');
                    });
                    
                    recognition.onresult = (event) => {
                        const result = event.results[0][0].transcript;
                        const numericValue = parseFloat(result.replace(/[^0-9.-]/g, ''));
                        
                        if (!isNaN(numericValue)) {
                            elements.inputValue.value = numericValue;
                            convert();
                            analytics.track('voice_input_successful');
                        }
                    };
                }
            }
            
            // Make navigation functions globally accessible
            window.scrollToConverter = scrollToConverter;
            window.scrollToSection = scrollToSection;
            window.showPrivacyModal = showPrivacyModal;
            window.showTermsModal = showTermsModal;
            window.showCookieModal = showCookieModal;
            window.showAboutModal = showAboutModal;
            window.showContactModal = showContactModal;
            window.showFAQModal = showFAQModal;
            window.showPaymentModal = showPaymentModal;
            window.hideModal = hideModal;
            window.loadFavorite = loadFavorite;
            window.copyToClipboard = copyToClipboard;
            
            // Setup quick contact form after DOM is ready
            setTimeout(() => {
                const quickContactForm = document.querySelector('form[name="quick-contact"]');
                if (quickContactForm) {
                    quickContactForm.addEventListener('submit', (e) => {
                        analytics.track('contact_form_submit', { source: 'modal' });
                        setTimeout(() => {
                            showNotification('Thank you! We\'ll get back to you within 24 hours.', 'success');
                            hideModal(document.getElementById('contactModal'));
                            e.target.reset();
                        }, 100);
                    });
                }
            }, 500);
            
            // Test all navigation links
            setTimeout(() => {
                const requiredModals = ['privacyModal', 'termsModal', 'cookieModal', 'aboutModal', 'contactModal'];
                let missingModals = 0;
                requiredModals.forEach(modalId => {
                    const modal = document.getElementById(modalId);
                    if (!modal) {
                        console.error(`Missing modal: ${modalId}`);
                        missingModals++;
                    }
                });
                
                const requiredSections = ['faq'];
                let missingSections = 0;
                requiredSections.forEach(sectionId => {
                    const section = document.getElementById(sectionId);
                    if (!section) {
                        console.error(`Missing section: ${sectionId}`);
                        missingSections++; 
                    }
                });
                
                if (missingModals === 0 && missingSections === 0) {
                    console.log('‚úÖ Navigation system initialized successfully - all links functional');
                    analytics.track('navigation_system_ready');
                } else {
                    console.warn(`‚ö†Ô∏è Navigation issues: ${missingModals} missing modals, ${missingSections} missing sections`);
                }
            }, 1000);
        }

        // Initialize the application when DOM is loaded
        document.addEventListener('DOMContentLoaded', init);

        // Service Worker registration with cache busting
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', async () => {
                try {
                    // Try to register external service worker file with cache busting
                    const registration = await navigator.serviceWorker.register(`/service-worker.js?v=${BUILD_TIMESTAMP}`);
                    
                    console.log('‚úÖ ServiceWorker registered with version:', APP_VERSION);
                    
                    // Only check for updates on manual request, not automatically
                    // registration.update(); // REMOVED: Causing constant refreshes
                    
                    // Listen for updates but don't auto-reload
                    registration.addEventListener('updatefound', () => {
                        const newWorker = registration.installing;
                        console.log('üîÑ New ServiceWorker found, installing...');
                        
                        newWorker.addEventListener('statechange', () => {
                            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                                console.log('üöÄ New version available (will activate on next visit)');
                                // REMOVED: Automatic refresh that was causing constant reloads
                                // showNotification('üîÑ Update available! Refreshing to latest version...');
                            }
                        });
                    });
                    
                    // REMOVED: Auto-check for updates that was causing refreshes every 30 minutes
                    
                } catch (error) {
                    console.log('‚ö†Ô∏è External ServiceWorker failed, using inline fallback');
                    
                    // Fallback: Inline service worker with cache busting
                    const swContent = `
                        const CACHE_NAME = 'precision-convert-v${APP_VERSION}';
                        const urlsToCache = ['/'];
                        
                        self.addEventListener('install', event => {
                            console.log('[SW] Installing version ${APP_VERSION}');
                            self.skipWaiting();
                            event.waitUntil(
                                caches.open(CACHE_NAME)
                                    .then(cache => cache.addAll(urlsToCache))
                            );
                        });
                        
                        self.addEventListener('activate', event => {
                            console.log('[SW] Activating version ${APP_VERSION}');
                            self.clients.claim();
                            event.waitUntil(
                                caches.keys().then(names => {
                                    return Promise.all(
                                        names.map(name => {
                                            if (name !== CACHE_NAME) {
                                                console.log('[SW] Deleting old cache:', name);
                                                return caches.delete(name);
                                            }
                                        })
                                    );
                                })
                            );
                        });
                        
                        self.addEventListener('fetch', event => {
                            if (!event.request.url.startsWith(self.location.origin)) return;
                            
                            event.respondWith(
                                fetch(event.request)
                                    .then(response => {
                                        const responseToCache = response.clone();
                                        caches.open(CACHE_NAME)
                                            .then(cache => cache.put(event.request, responseToCache));
                                        return response;
                                    })
                                    .catch(() => caches.match(event.request))
                            );
                        });
                        
                        self.addEventListener('message', event => {
                            if (event.data && event.data.type === 'SKIP_WAITING') {
                                self.skipWaiting();
                            }
                        });
                    `;
                    
                    const blob = new Blob([swContent], { type: 'application/javascript' });
                    const swURL = URL.createObjectURL(blob);
                    
                    navigator.serviceWorker.register(swURL)
                        .then(registration => console.log('‚úÖ Fallback ServiceWorker registered'))
                        .catch(error => console.log('‚ùå ServiceWorker registration failed:', error));
                }
            });
        }
    </script>

    <!-- 
    Netlify Configuration (extract as netlify.toml):
    
    [build]
    publish = "."
    
    [[redirects]]
    from = "/*"
    to = "/index.html"
    status = 200
    
    [[headers]]
    for = "/*"
    [headers.values]
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    X-XSS-Protection = "1; mode=block"
    -->

    <!-- 
    Redirects Configuration (extract as _redirects):
    
    /*    /index.html   200
    -->

    <!-- 
    Robots.txt Content:
    
    User-agent: *
    Allow: /
    
    Sitemap: https://precisionconvert.io/sitemap.xml
    -->

    <!-- 
    Sitemap.xml Content:
    
    <?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
        <url>
            <loc>https://precisionconvert.io/</loc>
            <lastmod>2024-12-01</lastmod>
            <changefreq>weekly</changefreq>
            <priority>1.0</priority>
        </url>
    </urlset>
    -->


    <!-- Privacy Policy Modal -->
    <div id="privacyModal" class="modal">
        <div class="modal-content" style="max-width: 800px;">
            <div class="modal-header">
                <h3>üîí Privacy Policy</h3>
                <button class="close-btn" onclick="hideModal(document.getElementById('privacyModal'))">&times;</button>
            </div>
            <div class="modal-body">
                <h4>Data Collection and Usage</h4>
                <p><strong>PrecisionConvert.io respects your privacy.</strong> All conversions are performed locally in your browser. We do not collect, store, or transmit your conversion data.</p>
                
                <h4>Local Storage</h4>
                <p>We use browser local storage to save your preferences including:</p>
                <ul>
                    <li>Theme selection</li>
                    <li>Conversion history (stored locally only)</li>
                    <li>Favorite conversions (stored locally only)</li>
                    <li>Premium subscription status</li>
                </ul>
                
                <h4>Analytics</h4>
                <p>We use Google Analytics with anonymized IPs to understand usage patterns and improve our service. This helps us identify which features are most valuable.</p>
                
                <h4>Payments</h4>
                <p>Payment processing is handled by Stripe. We do not store credit card information. Stripe's privacy policy applies to payment data.</p>
                
                <h4>Contact</h4>
                <p>For privacy questions: rainking6693@gmail.com</p>
                
                <p><small>Last updated: January 2025</small></p>
            </div>
        </div>
    </div>

    <!-- Terms of Service Modal -->
    <div id="termsModal" class="modal">
        <div class="modal-content" style="max-width: 800px;">
            <div class="modal-header">
                <h3>üìã Terms of Service</h3>
                <button class="close-btn" onclick="hideModal(document.getElementById('termsModal'))">&times;</button>
            </div>
            <div class="modal-body">
                <h4>Service Description</h4>
                <p>PrecisionConvert.io provides professional unit conversion tools for engineers, scientists, and professionals who require accurate calculations.</p>
                
                <h4>Accuracy Disclaimer</h4>
                <p>While we strive for maximum accuracy, users should verify critical calculations independently. We are not liable for decisions made based on conversion results.</p>
                
                <h4>Professional Subscription</h4>
                <p>Premium features are available for $4.99/month with:</p>
                <ul>
                    <li>Professional unit categories</li>
                    <li>Premium themes</li>
                    <li>Advanced precision settings</li>
                    <li>Export functionality</li>
                    <li>Custom unit creation</li>
                </ul>
                
                <h4>Refund Policy</h4>
                <p>7-day money-back guarantee for premium subscriptions. Contact us for refunds.</p>
                
                <h4>Limitation of Liability</h4>
                <p>PrecisionConvert.io is provided "as is" without warranties. We are not liable for any damages resulting from use of this service.</p>
                
                <p><small>Last updated: January 2025</small></p>
            </div>
        </div>
    </div>

    <!-- Cookie Policy Modal -->
    <div id="cookieModal" class="modal">
        <div class="modal-content" style="max-width: 700px;">
            <div class="modal-header">
                <h3>üç™ Cookie Policy</h3>
                <button class="close-btn" onclick="hideModal(document.getElementById('cookieModal'))">&times;</button>
            </div>
            <div class="modal-body">
                <h4>How We Use Cookies</h4>
                <p>PrecisionConvert.io uses cookies and local storage to enhance your experience:</p>
                
                <h4>Essential Cookies</h4>
                <ul>
                    <li><strong>Theme Preferences:</strong> Remember your chosen theme</li>
                    <li><strong>Conversion History:</strong> Store your recent conversions locally</li>
                    <li><strong>Premium Status:</strong> Remember your subscription status</li>
                </ul>
                
                <h4>Analytics Cookies</h4>
                <ul>
                    <li><strong>Google Analytics:</strong> Anonymous usage statistics (with anonymized IPs)</li>
                    <li><strong>Performance Tracking:</strong> Help us improve loading times and functionality</li>
                </ul>
                
                <h4>Managing Cookies</h4>
                <p>You can control cookies through your browser settings. Disabling cookies may limit some functionality.</p>
                
                <h4>Third-Party Services</h4>
                <ul>
                    <li><strong>Stripe:</strong> Payment processing cookies</li>
                    <li><strong>Netlify:</strong> Hosting and form submission</li>
                </ul>
                
                <p><small>Last updated: January 2025</small></p>
            </div>
        </div>
    </div>

    <!-- Success Modal -->
    <div id="successModal" class="modal">
        <div class="modal-content" style="max-width: 400px; text-align: center;">
            <div style="font-size: 4rem; margin-bottom: 1rem;">üéâ</div>
            <h3 style="color: #22c55e; margin-bottom: 1rem;">Welcome to Pro!</h3>
            <p style="margin-bottom: 2rem;">
                All premium features have been unlocked. Enjoy unlimited precision and advanced tools!
            </p>
            <button class="btn btn-primary" onclick="hideModal(document.getElementById('successModal'))" style="width: 100%;">
                Start Using PROFESSIONAL Features
            </button>
        </div>
    </div>

</body>
</html>